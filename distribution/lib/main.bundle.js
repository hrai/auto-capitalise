(()=>{var e={150:function(e,r){var s,n;"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self&&self,void 0===(n="function"==typeof(s=function(e){"use strict";if("undefined"==typeof browser||Object.getPrototypeOf(browser)!==Object.prototype){const r="The message port closed before a response was received.",s="Returning a Promise is the preferred way to send a reply from an onMessage/onMessageExternal listener, as the sendResponse will be removed from the specs (See https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/onMessage)",n=e=>{const n={alarms:{clear:{minArgs:0,maxArgs:1},clearAll:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getAll:{minArgs:0,maxArgs:0}},bookmarks:{create:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},getChildren:{minArgs:1,maxArgs:1},getRecent:{minArgs:1,maxArgs:1},getSubTree:{minArgs:1,maxArgs:1},getTree:{minArgs:0,maxArgs:0},move:{minArgs:2,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeTree:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}},browserAction:{disable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},enable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},getBadgeBackgroundColor:{minArgs:1,maxArgs:1},getBadgeText:{minArgs:1,maxArgs:1},getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},openPopup:{minArgs:0,maxArgs:0},setBadgeBackgroundColor:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setBadgeText:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},browsingData:{remove:{minArgs:2,maxArgs:2},removeCache:{minArgs:1,maxArgs:1},removeCookies:{minArgs:1,maxArgs:1},removeDownloads:{minArgs:1,maxArgs:1},removeFormData:{minArgs:1,maxArgs:1},removeHistory:{minArgs:1,maxArgs:1},removeLocalStorage:{minArgs:1,maxArgs:1},removePasswords:{minArgs:1,maxArgs:1},removePluginData:{minArgs:1,maxArgs:1},settings:{minArgs:0,maxArgs:0}},commands:{getAll:{minArgs:0,maxArgs:0}},contextMenus:{remove:{minArgs:1,maxArgs:1},removeAll:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},cookies:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:1,maxArgs:1},getAllCookieStores:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},devtools:{inspectedWindow:{eval:{minArgs:1,maxArgs:2,singleCallbackArg:!1}},panels:{create:{minArgs:3,maxArgs:3,singleCallbackArg:!0}}},downloads:{cancel:{minArgs:1,maxArgs:1},download:{minArgs:1,maxArgs:1},erase:{minArgs:1,maxArgs:1},getFileIcon:{minArgs:1,maxArgs:2},open:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},pause:{minArgs:1,maxArgs:1},removeFile:{minArgs:1,maxArgs:1},resume:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},extension:{isAllowedFileSchemeAccess:{minArgs:0,maxArgs:0},isAllowedIncognitoAccess:{minArgs:0,maxArgs:0}},history:{addUrl:{minArgs:1,maxArgs:1},deleteAll:{minArgs:0,maxArgs:0},deleteRange:{minArgs:1,maxArgs:1},deleteUrl:{minArgs:1,maxArgs:1},getVisits:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1}},i18n:{detectLanguage:{minArgs:1,maxArgs:1},getAcceptLanguages:{minArgs:0,maxArgs:0}},identity:{launchWebAuthFlow:{minArgs:1,maxArgs:1}},idle:{queryState:{minArgs:1,maxArgs:1}},management:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},getSelf:{minArgs:0,maxArgs:0},setEnabled:{minArgs:2,maxArgs:2},uninstallSelf:{minArgs:0,maxArgs:1}},notifications:{clear:{minArgs:1,maxArgs:1},create:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:0},getPermissionLevel:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},pageAction:{getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},hide:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},permissions:{contains:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},request:{minArgs:1,maxArgs:1}},runtime:{getBackgroundPage:{minArgs:0,maxArgs:0},getPlatformInfo:{minArgs:0,maxArgs:0},openOptionsPage:{minArgs:0,maxArgs:0},requestUpdateCheck:{minArgs:0,maxArgs:0},sendMessage:{minArgs:1,maxArgs:3},sendNativeMessage:{minArgs:2,maxArgs:2},setUninstallURL:{minArgs:1,maxArgs:1}},sessions:{getDevices:{minArgs:0,maxArgs:1},getRecentlyClosed:{minArgs:0,maxArgs:1},restore:{minArgs:0,maxArgs:1}},storage:{local:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},managed:{get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1}},sync:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}}},tabs:{captureVisibleTab:{minArgs:0,maxArgs:2},create:{minArgs:1,maxArgs:1},detectLanguage:{minArgs:0,maxArgs:1},discard:{minArgs:0,maxArgs:1},duplicate:{minArgs:1,maxArgs:1},executeScript:{minArgs:1,maxArgs:2},get:{minArgs:1,maxArgs:1},getCurrent:{minArgs:0,maxArgs:0},getZoom:{minArgs:0,maxArgs:1},getZoomSettings:{minArgs:0,maxArgs:1},highlight:{minArgs:1,maxArgs:1},insertCSS:{minArgs:1,maxArgs:2},move:{minArgs:2,maxArgs:2},query:{minArgs:1,maxArgs:1},reload:{minArgs:0,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeCSS:{minArgs:1,maxArgs:2},sendMessage:{minArgs:2,maxArgs:3},setZoom:{minArgs:1,maxArgs:2},setZoomSettings:{minArgs:1,maxArgs:2},update:{minArgs:1,maxArgs:2}},topSites:{get:{minArgs:0,maxArgs:0}},webNavigation:{getAllFrames:{minArgs:1,maxArgs:1},getFrame:{minArgs:1,maxArgs:1}},webRequest:{handlerBehaviorChanged:{minArgs:0,maxArgs:0}},windows:{create:{minArgs:0,maxArgs:1},get:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:1},getCurrent:{minArgs:0,maxArgs:1},getLastFocused:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}}};if(0===Object.keys(n).length)throw new Error("api-metadata.json has not been included in browser-polyfill");class t extends WeakMap{constructor(e,r){super(r),this.createItem=e}get(e){return this.has(e)||this.set(e,this.createItem(e)),super.get(e)}}const a=(r,s)=>(...n)=>{e.runtime.lastError?r.reject(e.runtime.lastError):s.singleCallbackArg||n.length<=1&&!1!==s.singleCallbackArg?r.resolve(n[0]):r.resolve(n)},g=e=>1==e?"argument":"arguments",i=(e,r,s)=>new Proxy(r,{apply:(r,n,t)=>s.call(n,e,...t)});let o=Function.call.bind(Object.prototype.hasOwnProperty);const m=(e,r={},s={})=>{let n=Object.create(null),t={has:(r,s)=>s in e||s in n,get(t,l,A){if(l in n)return n[l];if(!(l in e))return;let c=e[l];if("function"==typeof c)if("function"==typeof r[l])c=i(e,e[l],r[l]);else if(o(s,l)){let r=((e,r)=>function(s,...n){if(n.length<r.minArgs)throw new Error(`Expected at least ${r.minArgs} ${g(r.minArgs)} for ${e}(), got ${n.length}`);if(n.length>r.maxArgs)throw new Error(`Expected at most ${r.maxArgs} ${g(r.maxArgs)} for ${e}(), got ${n.length}`);return new Promise(((t,g)=>{if(r.fallbackToNoCallback)try{s[e](...n,a({resolve:t,reject:g},r))}catch(a){console.warn(`${e} API method doesn't seem to support the callback parameter, falling back to call it without a callback: `,a),s[e](...n),r.fallbackToNoCallback=!1,r.noCallback=!0,t()}else r.noCallback?(s[e](...n),t()):s[e](...n,a({resolve:t,reject:g},r))}))})(l,s[l]);c=i(e,e[l],r)}else c=c.bind(e);else if("object"==typeof c&&null!==c&&(o(r,l)||o(s,l)))c=m(c,r[l],s[l]);else{if(!o(s,"*"))return Object.defineProperty(n,l,{configurable:!0,enumerable:!0,get:()=>e[l],set(r){e[l]=r}}),c;c=m(c,r[l],s["*"])}return n[l]=c,c},set:(r,s,t,a)=>(s in n?n[s]=t:e[s]=t,!0),defineProperty:(e,r,s)=>Reflect.defineProperty(n,r,s),deleteProperty:(e,r)=>Reflect.deleteProperty(n,r)},l=Object.create(e);return new Proxy(l,t)},l=e=>({addListener(r,s,...n){r.addListener(e.get(s),...n)},hasListener:(r,s)=>r.hasListener(e.get(s)),removeListener(r,s){r.removeListener(e.get(s))}});let A=!1;const c=new t((e=>"function"!=typeof e?e:function(r,n,t){let a,g,i=!1,o=new Promise((e=>{a=function(r){A||(console.warn(s,(new Error).stack),A=!0),i=!0,e(r)}}));try{g=e(r,n,a)}catch(e){g=Promise.reject(e)}const m=!0!==g&&((l=g)&&"object"==typeof l&&"function"==typeof l.then);var l;if(!0!==g&&!m&&!i)return!1;return(m?g:o).then((e=>{t(e)}),(e=>{let r;r=e&&(e instanceof Error||"string"==typeof e.message)?e.message:"An unexpected error occurred",t({__mozWebExtensionPolyfillReject__:!0,message:r})})).catch((e=>{console.error("Failed to send onMessage rejected reply",e)})),!0})),u=({reject:s,resolve:n},t)=>{e.runtime.lastError?e.runtime.lastError.message===r?n():s(e.runtime.lastError):t&&t.__mozWebExtensionPolyfillReject__?s(new Error(t.message)):n(t)},x=(e,r,s,...n)=>{if(n.length<r.minArgs)throw new Error(`Expected at least ${r.minArgs} ${g(r.minArgs)} for ${e}(), got ${n.length}`);if(n.length>r.maxArgs)throw new Error(`Expected at most ${r.maxArgs} ${g(r.maxArgs)} for ${e}(), got ${n.length}`);return new Promise(((e,r)=>{const t=u.bind(null,{resolve:e,reject:r});n.push(t),s.sendMessage(...n)}))},d={runtime:{onMessage:l(c),onMessageExternal:l(c),sendMessage:x.bind(null,"sendMessage",{minArgs:1,maxArgs:3})},tabs:{sendMessage:x.bind(null,"sendMessage",{minArgs:2,maxArgs:3})}},f={clear:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}};return n.privacy={network:{"*":f},services:{"*":f},websites:{"*":f}},m(e,d,n)};if("object"!=typeof chrome||!chrome||!chrome.runtime||!chrome.runtime.id)throw new Error("This script should only be loaded in a browser extension.");e.exports=n(chrome)}else e.exports=browser})?s.apply(r,[e]):s)||(e.exports=n)},20:(e,r,s)=>{"use strict";var n=s(555),t=s(150),a=s.n(t);const g="auto-capitalise-extension",i="breaking loop";let o=[];function m(){var e,r,s,t;$(":text,textarea").on(`input.${g}`,(function(e){l(e.target)})),e=document.querySelector("body"),r=["p","span"],s=["input[type='text']","textarea"],t={subtree:!0,childList:!0,characterData:!0},new MutationObserver((function(e){$.each(e,(function(e,t){try{if("childList"===t.type){if(["P"].includes(t.target.nodeName))throw l(t.target),new Error(i);var a=t.addedNodes;a&&a.length>0&&(a.forEach((e=>{n.k7(e)&&(l(e.parentNode),a=a.filter((e=>{})))})),$.each(r,(function(e,r){n.$v(a,r).each((function(e,r){n.RL(r)&&l(r)}))})),$.each(s,(function(e,r){n.$v(a,r).each((function(e,r){$(r).on(`input.${g}`,(function(e){l(e.target)}))}))})))}else"characterData"===t.type&&l(t.target.parentNode)}catch(e){e.message!==i&&console.log(e)}}))})).observe(e,t),$("iframe").on("load",(e=>{let r=e.target;$(r).contents().find(":text,textarea").each(((e,r)=>{$(r).on(`input.${g}`,(function(e){l(e.target)}))}))}))}function l(e){n.q0(e,n.Wf,n.wq,n.Q,n.Hd)}a().storage.local.get(["sites_to_ignore","should_capitalise_i","should_capitalise_names","should_capitalise_abbreviations","constants_key_val","names_key_val","abbreviations_key_val","words_to_exclude"]).then((function(e){if(o=e.sites_to_ignore,n.qB(e.should_capitalise_i),n.Zz(e.should_capitalise_names),n.LS(e.should_capitalise_abbreviations),n.J$(e.constants_key_val),n.bY(e.names_key_val),n.Pf(e.abbreviations_key_val),console.log(e.words_to_exclude),n.zh(e.words_to_exclude),e&&o){var r=window.location.origin;try{var s=!0;if($.each(o,(function(e,n){r.includes(n)&&(s=!1)})),s)throw m(),new Error(i)}catch(e){if(e.message!==i)throw e}}else m()}),n.qQ),a().storage.onChanged.addListener((function(e,r){if("local"===r){if(null!=e.should_capitalise_i){const r=e.should_capitalise_i.newValue;null!=r&&n.qB(r)}if(null!=e.should_capitalise_names){const r=e.should_capitalise_names.newValue;null!=r&&n.Zz(r)}if(null!=e.should_capitalise_abbreviations){const r=e.should_capitalise_abbreviations.newValue;null!=r&&n.LS(r)}if(null!=e.words_to_exclude){const r=e.words_to_exclude.newValue;null!=r&&n.zh(r)}}}))},555:(e,r,s)=>{"use strict";s.d(r,{wq:()=>l,qB:()=>A,Zz:()=>c,LS:()=>u,J$:()=>x,bY:()=>d,Pf:()=>f,Wf:()=>p,qQ:()=>b,Q:()=>v,Hd:()=>w,k7:()=>y,q0:()=>k,$v:()=>C,RL:()=>T,zh:()=>P});let n=!1,t=!1,a=!1,g={},i={},o={},m=[];function l(e){return/\s+i(\s+|')$/.test(e)}function A(e){null!=e&&(n=e)}function c(e){null!=e&&(t=e)}function u(e){null!=e&&(a=e)}function x(e){null!=e&&(g=e)}function d(e){null!=e&&(i=e)}function f(e){null!=e&&(o=e)}function p(e){let r=/\s*\n+\s*\w$/.test(e);return!!r||(r=/\w+\s*([.?!])+\s+\w$/.test(e),r||1==e.length)}function h(e,r,s){let n=/\b(\w+)\W$/.exec(e);const t=["",""];if(n){const e=n[1];if(null!=e){if(m.includes(e))return t;let n=function(e,r,s){return!0===e?s[r.toLowerCase()]:s[r]}(s,e,r);if(null!=n)return[e,n]}}return t}function b(e){console.log(e)}function v(e,r){return"INPUT"===r.toUpperCase()||"TEXTAREA"===r.toUpperCase()?e.value?e.value:"":e.innerHTML?e.innerHTML:""}function w(e,r,s,n){"INPUT"!==r.toUpperCase()&&"TEXTAREA"!==r.toUpperCase()?(n&&(s+="<br>"),e.innerHTML=s,function(e){let r,s;if(document.createRange){r=document.createRange();const n=e.childNodes;if(null==n)return;const t=1==n.length?n[0]:n[n.length-2];if(null==t)return;"#text"===t.nodeName?(r.setStart(t,t.data.length),r.collapse(!1)):"<br>"===t.outerHTML?(r.setStart(t,0),r.collapse(!0)):(r.selectNodeContents(e),r.collapse(!1)),s=window.getSelection(),s.removeAllRanges(),s.addRange(r)}else document.selection&&(r=document.body.createTextRange(),r.moveToElementText(e),r.collapse(!1),r.select())}(e)):e.value=s}function y(e){const r=e.data;return!("#text"!==e.nodeName||1!==r.length||r.toUpperCase()==r||!T(e.parentNode))}function k(e,r,s,m,l){if(!e)return;let A=e.tagName;if(!function(e,r){return e.isContentEditable||"INPUT"===r.toUpperCase()||"TEXTAREA"===r.toUpperCase()}(e,A))return;let c=m(e,A);if(null==c)return;const u=c.trim().slice(-1),x=u.match(/[a-z]/i);if(1==c.length&&!x)return;if(x&&u.toUpperCase()===u)return;let d=!1;if(c.length>=4&&"<br>"===c.slice(-4)&&(c=c.slice(0,-4),d=!0),r(c))return void l(e,A,function(e){const r=e.slice(-1);return e.substr(0,e.length-1)+r.toUpperCase()}(c),d);if(c.length>=2&&s(c)&&n)return void l(e,A,function(e){const r=e.slice(-2);return e.substr(0,e.length-2)+r.toUpperCase()}(c),d);_(c,e,A,g,!0),t&&_(c,e,A,i,!1),a&&_(c,e,A,o,!1)}function _(e,r,s,n,t){const[a,g]=!0===t?function(e,r){return h(e,r,!1)}(e,n):function(e,r){return h(e,r,!0)}(e,n);""!==a&&a!==g&&w(r,s,e.replace(a,g),!1)}function C(e,r){return $(e).find(r).addBack(r)}function T(e){return function(e){return e&&e.isContentEditable}(e)&&!function(e){const r=$(e).html();return(!r||!/\s*<br>/.test(r))&&/<\/?\w+>/.test(r)}(e)}function P(e){e&&(m=e)}}},r={};function s(n){if(r[n])return r[n].exports;var t=r[n]={exports:{}};return e[n].call(t.exports,t,t.exports,s),t.exports}s.n=e=>{var r=e&&e.__esModule?()=>e.default:()=>e;return s.d(r,{a:r}),r},s.d=(e,r)=>{for(var n in r)s.o(r,n)&&!s.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:r[n]})},s.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),s(20),s(555)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,