/*! For license information please see settings.bundle.js.LICENSE.txt */
(()=>{var e={755:function(e,t){var n;!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,(function(r,a){"use strict";var i=[],o=Object.getPrototypeOf,s=i.slice,l=i.flat?function(e){return i.flat.call(e)}:function(e){return i.concat.apply([],e)},u=i.push,c=i.indexOf,d={},f=d.toString,h=d.hasOwnProperty,p=h.toString,g=p.call(Object),m={},y=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},v=function(e){return null!=e&&e===e.window},A=r.document,b={type:!0,src:!0,nonce:!0,noModule:!0};function x(e,t,n){var r,a,i=(n=n||A).createElement("script");if(i.text=e,t)for(r in b)(a=t[r]||t.getAttribute&&t.getAttribute(r))&&i.setAttribute(r,a);n.head.appendChild(i).parentNode.removeChild(i)}function S(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?d[f.call(e)]||"object":typeof e}var C="3.5.1",k=function(e,t){return new k.fn.init(e,t)};function M(e){var t=!!e&&"length"in e&&e.length,n=S(e);return!y(e)&&!v(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}k.fn=k.prototype={jquery:C,constructor:k,length:0,toArray:function(){return s.call(this)},get:function(e){return null==e?s.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=k.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return k.each(this,e)},map:function(e){return this.pushStack(k.map(this,(function(t,n){return e.call(t,n,t)})))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(k.grep(this,(function(e,t){return(t+1)%2})))},odd:function(){return this.pushStack(k.grep(this,(function(e,t){return t%2})))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:u,sort:i.sort,splice:i.splice},k.extend=k.fn.extend=function(){var e,t,n,r,a,i,o=arguments[0]||{},s=1,l=arguments.length,u=!1;for("boolean"==typeof o&&(u=o,o=arguments[s]||{},s++),"object"==typeof o||y(o)||(o={}),s===l&&(o=this,s--);s<l;s++)if(null!=(e=arguments[s]))for(t in e)r=e[t],"__proto__"!==t&&o!==r&&(u&&r&&(k.isPlainObject(r)||(a=Array.isArray(r)))?(n=o[t],i=a&&!Array.isArray(n)?[]:a||k.isPlainObject(n)?n:{},a=!1,o[t]=k.extend(u,i,r)):void 0!==r&&(o[t]=r));return o},k.extend({expando:"jQuery"+(C+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==f.call(e)||(t=o(e))&&("function"!=typeof(n=h.call(t,"constructor")&&t.constructor)||p.call(n)!==g))},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){x(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,r=0;if(M(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(M(Object(e))?k.merge(n,"string"==typeof e?[e]:e):u.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:c.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,a=e.length;r<n;r++)e[a++]=t[r];return e.length=a,e},grep:function(e,t,n){for(var r=[],a=0,i=e.length,o=!n;a<i;a++)!t(e[a],a)!==o&&r.push(e[a]);return r},map:function(e,t,n){var r,a,i=0,o=[];if(M(e))for(r=e.length;i<r;i++)null!=(a=t(e[i],i,n))&&o.push(a);else for(i in e)null!=(a=t(e[i],i,n))&&o.push(a);return l(o)},guid:1,support:m}),"function"==typeof Symbol&&(k.fn[Symbol.iterator]=i[Symbol.iterator]),k.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){d["[object "+t+"]"]=t.toLowerCase()}));var w=function(e){var t,n,r,a,i,o,s,l,u,c,d,f,h,p,g,m,y,v,A,b="sizzle"+1*new Date,x=e.document,S=0,C=0,k=le(),M=le(),w=le(),T=le(),B=function(e,t){return e===t&&(d=!0),0},L={}.hasOwnProperty,E=[],D=E.pop,P=E.push,R=E.push,N=E.slice,H=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},j="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",z="[\\x20\\t\\r\\n\\f]",W="(?:\\\\[\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",F="\\[[\\x20\\t\\r\\n\\f]*("+W+")(?:"+z+"*([*^$|!~]?=)"+z+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+W+"))|)"+z+"*\\]",G=":("+W+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+F+")*)|.*)\\)|)",O=new RegExp(z+"+","g"),K=new RegExp("^[\\x20\\t\\r\\n\\f]+|((?:^|[^\\\\])(?:\\\\.)*)[\\x20\\t\\r\\n\\f]+$","g"),I=new RegExp("^[\\x20\\t\\r\\n\\f]*,[\\x20\\t\\r\\n\\f]*"),q=new RegExp("^[\\x20\\t\\r\\n\\f]*([>+~]|[\\x20\\t\\r\\n\\f])[\\x20\\t\\r\\n\\f]*"),J=new RegExp(z+"|>"),V=new RegExp(G),$=new RegExp("^"+W+"$"),_={ID:new RegExp("^#("+W+")"),CLASS:new RegExp("^\\.("+W+")"),TAG:new RegExp("^("+W+"|[*])"),ATTR:new RegExp("^"+F),PSEUDO:new RegExp("^"+G),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\([\\x20\\t\\r\\n\\f]*(even|odd|(([+-]|)(\\d*)n|)[\\x20\\t\\r\\n\\f]*(?:([+-]|)[\\x20\\t\\r\\n\\f]*(\\d+)|))[\\x20\\t\\r\\n\\f]*\\)|)","i"),bool:new RegExp("^(?:"+j+")$","i"),needsContext:new RegExp("^[\\x20\\t\\r\\n\\f]*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\([\\x20\\t\\r\\n\\f]*((?:-\\d)?\\d*)[\\x20\\t\\r\\n\\f]*\\)|)(?=[^-]|$)","i")},U=/HTML$/i,Y=/^(?:input|select|textarea|button)$/i,Q=/^h\d$/i,X=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\[\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|\\\\([^\\r\\n\\f])","g"),ne=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},re=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ae=function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ie=function(){f()},oe=be((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{R.apply(E=N.call(x.childNodes),x.childNodes),E[x.childNodes.length].nodeType}catch(e){R={apply:E.length?function(e,t){P.apply(e,N.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function se(e,t,r,a){var i,s,u,c,d,p,y,v=t&&t.ownerDocument,x=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==x&&9!==x&&11!==x)return r;if(!a&&(f(t),t=t||h,g)){if(11!==x&&(d=Z.exec(e)))if(i=d[1]){if(9===x){if(!(u=t.getElementById(i)))return r;if(u.id===i)return r.push(u),r}else if(v&&(u=v.getElementById(i))&&A(t,u)&&u.id===i)return r.push(u),r}else{if(d[2])return R.apply(r,t.getElementsByTagName(e)),r;if((i=d[3])&&n.getElementsByClassName&&t.getElementsByClassName)return R.apply(r,t.getElementsByClassName(i)),r}if(n.qsa&&!T[e+" "]&&(!m||!m.test(e))&&(1!==x||"object"!==t.nodeName.toLowerCase())){if(y=e,v=t,1===x&&(J.test(e)||q.test(e))){for((v=ee.test(e)&&ye(t.parentNode)||t)===t&&n.scope||((c=t.getAttribute("id"))?c=c.replace(re,ae):t.setAttribute("id",c=b)),s=(p=o(e)).length;s--;)p[s]=(c?"#"+c:":scope")+" "+Ae(p[s]);y=p.join(",")}try{return R.apply(r,v.querySelectorAll(y)),r}catch(t){T(e,!0)}finally{c===b&&t.removeAttribute("id")}}}return l(e.replace(K,"$1"),t,r,a)}function le(){var e=[];return function t(n,a){return e.push(n+" ")>r.cacheLength&&delete t[e.shift()],t[n+" "]=a}}function ue(e){return e[b]=!0,e}function ce(e){var t=h.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function de(e,t){for(var n=e.split("|"),a=n.length;a--;)r.attrHandle[n[a]]=t}function fe(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function he(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function pe(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function ge(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&oe(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function me(e){return ue((function(t){return t=+t,ue((function(n,r){for(var a,i=e([],n.length,t),o=i.length;o--;)n[a=i[o]]&&(n[a]=!(r[a]=n[a]))}))}))}function ye(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=se.support={},i=se.isXML=function(e){var t=e.namespaceURI,n=(e.ownerDocument||e).documentElement;return!U.test(t||n&&n.nodeName||"HTML")},f=se.setDocument=function(e){var t,a,o=e?e.ownerDocument||e:x;return o!=h&&9===o.nodeType&&o.documentElement?(p=(h=o).documentElement,g=!i(h),x!=h&&(a=h.defaultView)&&a.top!==a&&(a.addEventListener?a.addEventListener("unload",ie,!1):a.attachEvent&&a.attachEvent("onunload",ie)),n.scope=ce((function(e){return p.appendChild(e).appendChild(h.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length})),n.attributes=ce((function(e){return e.className="i",!e.getAttribute("className")})),n.getElementsByTagName=ce((function(e){return e.appendChild(h.createComment("")),!e.getElementsByTagName("*").length})),n.getElementsByClassName=X.test(h.getElementsByClassName),n.getById=ce((function(e){return p.appendChild(e).id=b,!h.getElementsByName||!h.getElementsByName(b).length})),n.getById?(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&g){var n=t.getElementById(e);return n?[n]:[]}}):(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&g){var n,r,a,i=t.getElementById(e);if(i){if((n=i.getAttributeNode("id"))&&n.value===e)return[i];for(a=t.getElementsByName(e),r=0;i=a[r++];)if((n=i.getAttributeNode("id"))&&n.value===e)return[i]}return[]}}),r.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],a=0,i=t.getElementsByTagName(e);if("*"===e){for(;n=i[a++];)1===n.nodeType&&r.push(n);return r}return i},r.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&g)return t.getElementsByClassName(e)},y=[],m=[],(n.qsa=X.test(h.querySelectorAll))&&(ce((function(e){var t;p.appendChild(e).innerHTML="<a id='"+b+"'></a><select id='"+b+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]=[\\x20\\t\\r\\n\\f]*(?:''|\"\")"),e.querySelectorAll("[selected]").length||m.push("\\[[\\x20\\t\\r\\n\\f]*(?:value|"+j+")"),e.querySelectorAll("[id~="+b+"-]").length||m.push("~="),(t=h.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||m.push("\\[[\\x20\\t\\r\\n\\f]*name[\\x20\\t\\r\\n\\f]*=[\\x20\\t\\r\\n\\f]*(?:''|\"\")"),e.querySelectorAll(":checked").length||m.push(":checked"),e.querySelectorAll("a#"+b+"+*").length||m.push(".#.+[+~]"),e.querySelectorAll("\\\f"),m.push("[\\r\\n\\f]")})),ce((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=h.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&m.push("name[\\x20\\t\\r\\n\\f]*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),p.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),m.push(",.*:")}))),(n.matchesSelector=X.test(v=p.matches||p.webkitMatchesSelector||p.mozMatchesSelector||p.oMatchesSelector||p.msMatchesSelector))&&ce((function(e){n.disconnectedMatch=v.call(e,"*"),v.call(e,"[s!='']:x"),y.push("!=",G)})),m=m.length&&new RegExp(m.join("|")),y=y.length&&new RegExp(y.join("|")),t=X.test(p.compareDocumentPosition),A=t||X.test(p.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},B=t?function(e,t){if(e===t)return d=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r||(1&(r=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===r?e==h||e.ownerDocument==x&&A(x,e)?-1:t==h||t.ownerDocument==x&&A(x,t)?1:c?H(c,e)-H(c,t):0:4&r?-1:1)}:function(e,t){if(e===t)return d=!0,0;var n,r=0,a=e.parentNode,i=t.parentNode,o=[e],s=[t];if(!a||!i)return e==h?-1:t==h?1:a?-1:i?1:c?H(c,e)-H(c,t):0;if(a===i)return fe(e,t);for(n=e;n=n.parentNode;)o.unshift(n);for(n=t;n=n.parentNode;)s.unshift(n);for(;o[r]===s[r];)r++;return r?fe(o[r],s[r]):o[r]==x?-1:s[r]==x?1:0},h):h},se.matches=function(e,t){return se(e,null,null,t)},se.matchesSelector=function(e,t){if(f(e),n.matchesSelector&&g&&!T[t+" "]&&(!y||!y.test(t))&&(!m||!m.test(t)))try{var r=v.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){T(t,!0)}return se(t,h,null,[e]).length>0},se.contains=function(e,t){return(e.ownerDocument||e)!=h&&f(e),A(e,t)},se.attr=function(e,t){(e.ownerDocument||e)!=h&&f(e);var a=r.attrHandle[t.toLowerCase()],i=a&&L.call(r.attrHandle,t.toLowerCase())?a(e,t,!g):void 0;return void 0!==i?i:n.attributes||!g?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},se.escape=function(e){return(e+"").replace(re,ae)},se.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},se.uniqueSort=function(e){var t,r=[],a=0,i=0;if(d=!n.detectDuplicates,c=!n.sortStable&&e.slice(0),e.sort(B),d){for(;t=e[i++];)t===e[i]&&(a=r.push(i));for(;a--;)e.splice(r[a],1)}return c=null,e},a=se.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=a(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=a(t);return n},(r=se.selectors={cacheLength:50,createPseudo:ue,match:_,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return _.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&V.test(n)&&(t=o(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=k[e+" "];return t||(t=new RegExp("(^|[\\x20\\t\\r\\n\\f])"+e+"("+z+"|$)"))&&k(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,n){return function(r){var a=se.attr(r,e);return null==a?"!="===t:!t||(a+="","="===t?a===n:"!="===t?a!==n:"^="===t?n&&0===a.indexOf(n):"*="===t?n&&a.indexOf(n)>-1:"$="===t?n&&a.slice(-n.length)===n:"~="===t?(" "+a.replace(O," ")+" ").indexOf(n)>-1:"|="===t&&(a===n||a.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,a){var i="nth"!==e.slice(0,3),o="last"!==e.slice(-4),s="of-type"===t;return 1===r&&0===a?function(e){return!!e.parentNode}:function(t,n,l){var u,c,d,f,h,p,g=i!==o?"nextSibling":"previousSibling",m=t.parentNode,y=s&&t.nodeName.toLowerCase(),v=!l&&!s,A=!1;if(m){if(i){for(;g;){for(f=t;f=f[g];)if(s?f.nodeName.toLowerCase()===y:1===f.nodeType)return!1;p=g="only"===e&&!p&&"nextSibling"}return!0}if(p=[o?m.firstChild:m.lastChild],o&&v){for(A=(h=(u=(c=(d=(f=m)[b]||(f[b]={}))[f.uniqueID]||(d[f.uniqueID]={}))[e]||[])[0]===S&&u[1])&&u[2],f=h&&m.childNodes[h];f=++h&&f&&f[g]||(A=h=0)||p.pop();)if(1===f.nodeType&&++A&&f===t){c[e]=[S,h,A];break}}else if(v&&(A=h=(u=(c=(d=(f=t)[b]||(f[b]={}))[f.uniqueID]||(d[f.uniqueID]={}))[e]||[])[0]===S&&u[1]),!1===A)for(;(f=++h&&f&&f[g]||(A=h=0)||p.pop())&&((s?f.nodeName.toLowerCase()!==y:1!==f.nodeType)||!++A||(v&&((c=(d=f[b]||(f[b]={}))[f.uniqueID]||(d[f.uniqueID]={}))[e]=[S,A]),f!==t)););return(A-=a)===r||A%r==0&&A/r>=0}}},PSEUDO:function(e,t){var n,a=r.pseudos[e]||r.setFilters[e.toLowerCase()]||se.error("unsupported pseudo: "+e);return a[b]?a(t):a.length>1?(n=[e,e,"",t],r.setFilters.hasOwnProperty(e.toLowerCase())?ue((function(e,n){for(var r,i=a(e,t),o=i.length;o--;)e[r=H(e,i[o])]=!(n[r]=i[o])})):function(e){return a(e,0,n)}):a}},pseudos:{not:ue((function(e){var t=[],n=[],r=s(e.replace(K,"$1"));return r[b]?ue((function(e,t,n,a){for(var i,o=r(e,null,a,[]),s=e.length;s--;)(i=o[s])&&(e[s]=!(t[s]=i))})):function(e,a,i){return t[0]=e,r(t,null,i,n),t[0]=null,!n.pop()}})),has:ue((function(e){return function(t){return se(e,t).length>0}})),contains:ue((function(e){return e=e.replace(te,ne),function(t){return(t.textContent||a(t)).indexOf(e)>-1}})),lang:ue((function(e){return $.test(e||"")||se.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=g?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===p},focus:function(e){return e===h.activeElement&&(!h.hasFocus||h.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:ge(!1),disabled:ge(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!r.pseudos.empty(e)},header:function(e){return Q.test(e.nodeName)},input:function(e){return Y.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:me((function(){return[0]})),last:me((function(e,t){return[t-1]})),eq:me((function(e,t,n){return[n<0?n+t:n]})),even:me((function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e})),odd:me((function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e})),lt:me((function(e,t,n){for(var r=n<0?n+t:n>t?t:n;--r>=0;)e.push(r);return e})),gt:me((function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e}))}}).pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[t]=he(t);for(t in{submit:!0,reset:!0})r.pseudos[t]=pe(t);function ve(){}function Ae(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function be(e,t,n){var r=t.dir,a=t.next,i=a||r,o=n&&"parentNode"===i,s=C++;return t.first?function(t,n,a){for(;t=t[r];)if(1===t.nodeType||o)return e(t,n,a);return!1}:function(t,n,l){var u,c,d,f=[S,s];if(l){for(;t=t[r];)if((1===t.nodeType||o)&&e(t,n,l))return!0}else for(;t=t[r];)if(1===t.nodeType||o)if(c=(d=t[b]||(t[b]={}))[t.uniqueID]||(d[t.uniqueID]={}),a&&a===t.nodeName.toLowerCase())t=t[r]||t;else{if((u=c[i])&&u[0]===S&&u[1]===s)return f[2]=u[2];if(c[i]=f,f[2]=e(t,n,l))return!0}return!1}}function xe(e){return e.length>1?function(t,n,r){for(var a=e.length;a--;)if(!e[a](t,n,r))return!1;return!0}:e[0]}function Se(e,t,n,r,a){for(var i,o=[],s=0,l=e.length,u=null!=t;s<l;s++)(i=e[s])&&(n&&!n(i,r,a)||(o.push(i),u&&t.push(s)));return o}function Ce(e,t,n,r,a,i){return r&&!r[b]&&(r=Ce(r)),a&&!a[b]&&(a=Ce(a,i)),ue((function(i,o,s,l){var u,c,d,f=[],h=[],p=o.length,g=i||function(e,t,n){for(var r=0,a=t.length;r<a;r++)se(e,t[r],n);return n}(t||"*",s.nodeType?[s]:s,[]),m=!e||!i&&t?g:Se(g,f,e,s,l),y=n?a||(i?e:p||r)?[]:o:m;if(n&&n(m,y,s,l),r)for(u=Se(y,h),r(u,[],s,l),c=u.length;c--;)(d=u[c])&&(y[h[c]]=!(m[h[c]]=d));if(i){if(a||e){if(a){for(u=[],c=y.length;c--;)(d=y[c])&&u.push(m[c]=d);a(null,y=[],u,l)}for(c=y.length;c--;)(d=y[c])&&(u=a?H(i,d):f[c])>-1&&(i[u]=!(o[u]=d))}}else y=Se(y===o?y.splice(p,y.length):y),a?a(null,o,y,l):R.apply(o,y)}))}function ke(e){for(var t,n,a,i=e.length,o=r.relative[e[0].type],s=o||r.relative[" "],l=o?1:0,c=be((function(e){return e===t}),s,!0),d=be((function(e){return H(t,e)>-1}),s,!0),f=[function(e,n,r){var a=!o&&(r||n!==u)||((t=n).nodeType?c(e,n,r):d(e,n,r));return t=null,a}];l<i;l++)if(n=r.relative[e[l].type])f=[be(xe(f),n)];else{if((n=r.filter[e[l].type].apply(null,e[l].matches))[b]){for(a=++l;a<i&&!r.relative[e[a].type];a++);return Ce(l>1&&xe(f),l>1&&Ae(e.slice(0,l-1).concat({value:" "===e[l-2].type?"*":""})).replace(K,"$1"),n,l<a&&ke(e.slice(l,a)),a<i&&ke(e=e.slice(a)),a<i&&Ae(e))}f.push(n)}return xe(f)}return ve.prototype=r.filters=r.pseudos,r.setFilters=new ve,o=se.tokenize=function(e,t){var n,a,i,o,s,l,u,c=M[e+" "];if(c)return t?0:c.slice(0);for(s=e,l=[],u=r.preFilter;s;){for(o in n&&!(a=I.exec(s))||(a&&(s=s.slice(a[0].length)||s),l.push(i=[])),n=!1,(a=q.exec(s))&&(n=a.shift(),i.push({value:n,type:a[0].replace(K," ")}),s=s.slice(n.length)),r.filter)!(a=_[o].exec(s))||u[o]&&!(a=u[o](a))||(n=a.shift(),i.push({value:n,type:o,matches:a}),s=s.slice(n.length));if(!n)break}return t?s.length:s?se.error(e):M(e,l).slice(0)},s=se.compile=function(e,t){var n,a=[],i=[],s=w[e+" "];if(!s){for(t||(t=o(e)),n=t.length;n--;)(s=ke(t[n]))[b]?a.push(s):i.push(s);(s=w(e,function(e,t){var n=t.length>0,a=e.length>0,i=function(i,o,s,l,c){var d,p,m,y=0,v="0",A=i&&[],b=[],x=u,C=i||a&&r.find.TAG("*",c),k=S+=null==x?1:Math.random()||.1,M=C.length;for(c&&(u=o==h||o||c);v!==M&&null!=(d=C[v]);v++){if(a&&d){for(p=0,o||d.ownerDocument==h||(f(d),s=!g);m=e[p++];)if(m(d,o||h,s)){l.push(d);break}c&&(S=k)}n&&((d=!m&&d)&&y--,i&&A.push(d))}if(y+=v,n&&v!==y){for(p=0;m=t[p++];)m(A,b,o,s);if(i){if(y>0)for(;v--;)A[v]||b[v]||(b[v]=D.call(l));b=Se(b)}R.apply(l,b),c&&!i&&b.length>0&&y+t.length>1&&se.uniqueSort(l)}return c&&(S=k,u=x),A};return n?ue(i):i}(i,a))).selector=e}return s},l=se.select=function(e,t,n,a){var i,l,u,c,d,f="function"==typeof e&&e,h=!a&&o(e=f.selector||e);if(n=n||[],1===h.length){if((l=h[0]=h[0].slice(0)).length>2&&"ID"===(u=l[0]).type&&9===t.nodeType&&g&&r.relative[l[1].type]){if(!(t=(r.find.ID(u.matches[0].replace(te,ne),t)||[])[0]))return n;f&&(t=t.parentNode),e=e.slice(l.shift().value.length)}for(i=_.needsContext.test(e)?0:l.length;i--&&(u=l[i],!r.relative[c=u.type]);)if((d=r.find[c])&&(a=d(u.matches[0].replace(te,ne),ee.test(l[0].type)&&ye(t.parentNode)||t))){if(l.splice(i,1),!(e=a.length&&Ae(l)))return R.apply(n,a),n;break}}return(f||s(e,h))(a,t,!g,n,!t||ee.test(e)&&ye(t.parentNode)||t),n},n.sortStable=b.split("").sort(B).join("")===b,n.detectDuplicates=!!d,f(),n.sortDetached=ce((function(e){return 1&e.compareDocumentPosition(h.createElement("fieldset"))})),ce((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||de("type|href|height|width",(function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)})),n.attributes&&ce((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||de("value",(function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),ce((function(e){return null==e.getAttribute("disabled")}))||de(j,(function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null})),se}(r);k.find=w,k.expr=w.selectors,k.expr[":"]=k.expr.pseudos,k.uniqueSort=k.unique=w.uniqueSort,k.text=w.getText,k.isXMLDoc=w.isXML,k.contains=w.contains,k.escapeSelector=w.escape;var T=function(e,t,n){for(var r=[],a=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(a&&k(e).is(n))break;r.push(e)}return r},B=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},L=k.expr.match.needsContext;function E(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var D=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function P(e,t,n){return y(t)?k.grep(e,(function(e,r){return!!t.call(e,r,e)!==n})):t.nodeType?k.grep(e,(function(e){return e===t!==n})):"string"!=typeof t?k.grep(e,(function(e){return c.call(t,e)>-1!==n})):k.filter(t,e,n)}k.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?k.find.matchesSelector(r,e)?[r]:[]:k.find.matches(e,k.grep(t,(function(e){return 1===e.nodeType})))},k.fn.extend({find:function(e){var t,n,r=this.length,a=this;if("string"!=typeof e)return this.pushStack(k(e).filter((function(){for(t=0;t<r;t++)if(k.contains(a[t],this))return!0})));for(n=this.pushStack([]),t=0;t<r;t++)k.find(e,a[t],n);return r>1?k.uniqueSort(n):n},filter:function(e){return this.pushStack(P(this,e||[],!1))},not:function(e){return this.pushStack(P(this,e||[],!0))},is:function(e){return!!P(this,"string"==typeof e&&L.test(e)?k(e):e||[],!1).length}});var R,N=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(k.fn.init=function(e,t,n){var r,a;if(!e)return this;if(n=n||R,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:N.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof k?t[0]:t,k.merge(this,k.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:A,!0)),D.test(r[1])&&k.isPlainObject(t))for(r in t)y(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(a=A.getElementById(r[2]))&&(this[0]=a,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):y(e)?void 0!==n.ready?n.ready(e):e(k):k.makeArray(e,this)}).prototype=k.fn,R=k(A);var H=/^(?:parents|prev(?:Until|All))/,j={children:!0,contents:!0,next:!0,prev:!0};function z(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}k.fn.extend({has:function(e){var t=k(e,this),n=t.length;return this.filter((function(){for(var e=0;e<n;e++)if(k.contains(this,t[e]))return!0}))},closest:function(e,t){var n,r=0,a=this.length,i=[],o="string"!=typeof e&&k(e);if(!L.test(e))for(;r<a;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(o?o.index(n)>-1:1===n.nodeType&&k.find.matchesSelector(n,e))){i.push(n);break}return this.pushStack(i.length>1?k.uniqueSort(i):i)},index:function(e){return e?"string"==typeof e?c.call(k(e),this[0]):c.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(k.uniqueSort(k.merge(this.get(),k(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),k.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return T(e,"parentNode")},parentsUntil:function(e,t,n){return T(e,"parentNode",n)},next:function(e){return z(e,"nextSibling")},prev:function(e){return z(e,"previousSibling")},nextAll:function(e){return T(e,"nextSibling")},prevAll:function(e){return T(e,"previousSibling")},nextUntil:function(e,t,n){return T(e,"nextSibling",n)},prevUntil:function(e,t,n){return T(e,"previousSibling",n)},siblings:function(e){return B((e.parentNode||{}).firstChild,e)},children:function(e){return B(e.firstChild)},contents:function(e){return null!=e.contentDocument&&o(e.contentDocument)?e.contentDocument:(E(e,"template")&&(e=e.content||e),k.merge([],e.childNodes))}},(function(e,t){k.fn[e]=function(n,r){var a=k.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(a=k.filter(r,a)),this.length>1&&(j[e]||k.uniqueSort(a),H.test(e)&&a.reverse()),this.pushStack(a)}}));var W=/[^\x20\t\r\n\f]+/g;function F(e){return e}function G(e){throw e}function O(e,t,n,r){var a;try{e&&y(a=e.promise)?a.call(e).done(t).fail(n):e&&y(a=e.then)?a.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}k.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return k.each(e.match(W)||[],(function(e,n){t[n]=!0})),t}(e):k.extend({},e);var t,n,r,a,i=[],o=[],s=-1,l=function(){for(a=a||e.once,r=t=!0;o.length;s=-1)for(n=o.shift();++s<i.length;)!1===i[s].apply(n[0],n[1])&&e.stopOnFalse&&(s=i.length,n=!1);e.memory||(n=!1),t=!1,a&&(i=n?[]:"")},u={add:function(){return i&&(n&&!t&&(s=i.length-1,o.push(n)),function t(n){k.each(n,(function(n,r){y(r)?e.unique&&u.has(r)||i.push(r):r&&r.length&&"string"!==S(r)&&t(r)}))}(arguments),n&&!t&&l()),this},remove:function(){return k.each(arguments,(function(e,t){for(var n;(n=k.inArray(t,i,n))>-1;)i.splice(n,1),n<=s&&s--})),this},has:function(e){return e?k.inArray(e,i)>-1:i.length>0},empty:function(){return i&&(i=[]),this},disable:function(){return a=o=[],i=n="",this},disabled:function(){return!i},lock:function(){return a=o=[],n||t||(i=n=""),this},locked:function(){return!!a},fireWith:function(e,n){return a||(n=[e,(n=n||[]).slice?n.slice():n],o.push(n),t||l()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!r}};return u},k.extend({Deferred:function(e){var t=[["notify","progress",k.Callbacks("memory"),k.Callbacks("memory"),2],["resolve","done",k.Callbacks("once memory"),k.Callbacks("once memory"),0,"resolved"],["reject","fail",k.Callbacks("once memory"),k.Callbacks("once memory"),1,"rejected"]],n="pending",a={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},catch:function(e){return a.then(null,e)},pipe:function(){var e=arguments;return k.Deferred((function(n){k.each(t,(function(t,r){var a=y(e[r[4]])&&e[r[4]];i[r[1]]((function(){var e=a&&a.apply(this,arguments);e&&y(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,a?[e]:arguments)}))})),e=null})).promise()},then:function(e,n,a){var i=0;function o(e,t,n,a){return function(){var s=this,l=arguments,u=function(){var r,u;if(!(e<i)){if((r=n.apply(s,l))===t.promise())throw new TypeError("Thenable self-resolution");u=r&&("object"==typeof r||"function"==typeof r)&&r.then,y(u)?a?u.call(r,o(i,t,F,a),o(i,t,G,a)):(i++,u.call(r,o(i,t,F,a),o(i,t,G,a),o(i,t,F,t.notifyWith))):(n!==F&&(s=void 0,l=[r]),(a||t.resolveWith)(s,l))}},c=a?u:function(){try{u()}catch(r){k.Deferred.exceptionHook&&k.Deferred.exceptionHook(r,c.stackTrace),e+1>=i&&(n!==G&&(s=void 0,l=[r]),t.rejectWith(s,l))}};e?c():(k.Deferred.getStackHook&&(c.stackTrace=k.Deferred.getStackHook()),r.setTimeout(c))}}return k.Deferred((function(r){t[0][3].add(o(0,r,y(a)?a:F,r.notifyWith)),t[1][3].add(o(0,r,y(e)?e:F)),t[2][3].add(o(0,r,y(n)?n:G))})).promise()},promise:function(e){return null!=e?k.extend(e,a):a}},i={};return k.each(t,(function(e,r){var o=r[2],s=r[5];a[r[1]]=o.add,s&&o.add((function(){n=s}),t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),o.add(r[3].fire),i[r[0]]=function(){return i[r[0]+"With"](this===i?void 0:this,arguments),this},i[r[0]+"With"]=o.fireWith})),a.promise(i),e&&e.call(i,i),i},when:function(e){var t=arguments.length,n=t,r=Array(n),a=s.call(arguments),i=k.Deferred(),o=function(e){return function(n){r[e]=this,a[e]=arguments.length>1?s.call(arguments):n,--t||i.resolveWith(r,a)}};if(t<=1&&(O(e,i.done(o(n)).resolve,i.reject,!t),"pending"===i.state()||y(a[n]&&a[n].then)))return i.then();for(;n--;)O(a[n],o(n),i.reject);return i.promise()}});var K=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;k.Deferred.exceptionHook=function(e,t){r.console&&r.console.warn&&e&&K.test(e.name)&&r.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},k.readyException=function(e){r.setTimeout((function(){throw e}))};var I=k.Deferred();function q(){A.removeEventListener("DOMContentLoaded",q),r.removeEventListener("load",q),k.ready()}k.fn.ready=function(e){return I.then(e).catch((function(e){k.readyException(e)})),this},k.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--k.readyWait:k.isReady)||(k.isReady=!0,!0!==e&&--k.readyWait>0||I.resolveWith(A,[k]))}}),k.ready.then=I.then,"complete"===A.readyState||"loading"!==A.readyState&&!A.documentElement.doScroll?r.setTimeout(k.ready):(A.addEventListener("DOMContentLoaded",q),r.addEventListener("load",q));var J=function(e,t,n,r,a,i,o){var s=0,l=e.length,u=null==n;if("object"===S(n))for(s in a=!0,n)J(e,t,s,n[s],!0,i,o);else if(void 0!==r&&(a=!0,y(r)||(o=!0),u&&(o?(t.call(e,r),t=null):(u=t,t=function(e,t,n){return u.call(k(e),n)})),t))for(;s<l;s++)t(e[s],n,o?r:r.call(e[s],s,t(e[s],n)));return a?e:u?t.call(e):l?t(e[0],n):i},V=/^-ms-/,$=/-([a-z])/g;function _(e,t){return t.toUpperCase()}function U(e){return e.replace(V,"ms-").replace($,_)}var Y=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function Q(){this.expando=k.expando+Q.uid++}Q.uid=1,Q.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Y(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,a=this.cache(e);if("string"==typeof t)a[U(t)]=n;else for(r in t)a[U(r)]=t[r];return a},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][U(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(U):(t=U(t))in r?[t]:t.match(W)||[]).length;for(;n--;)delete r[t[n]]}(void 0===t||k.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!k.isEmptyObject(t)}};var X=new Q,Z=new Q,ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,te=/[A-Z]/g;function ne(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(te,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ee.test(e)?JSON.parse(e):e)}(n)}catch(e){}Z.set(e,t,n)}else n=void 0;return n}k.extend({hasData:function(e){return Z.hasData(e)||X.hasData(e)},data:function(e,t,n){return Z.access(e,t,n)},removeData:function(e,t){Z.remove(e,t)},_data:function(e,t,n){return X.access(e,t,n)},_removeData:function(e,t){X.remove(e,t)}}),k.fn.extend({data:function(e,t){var n,r,a,i=this[0],o=i&&i.attributes;if(void 0===e){if(this.length&&(a=Z.get(i),1===i.nodeType&&!X.get(i,"hasDataAttrs"))){for(n=o.length;n--;)o[n]&&0===(r=o[n].name).indexOf("data-")&&(r=U(r.slice(5)),ne(i,r,a[r]));X.set(i,"hasDataAttrs",!0)}return a}return"object"==typeof e?this.each((function(){Z.set(this,e)})):J(this,(function(t){var n;if(i&&void 0===t)return void 0!==(n=Z.get(i,e))||void 0!==(n=ne(i,e))?n:void 0;this.each((function(){Z.set(this,e,t)}))}),null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){Z.remove(this,e)}))}}),k.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=X.get(e,t),n&&(!r||Array.isArray(n)?r=X.access(e,t,k.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=k.queue(e,t),r=n.length,a=n.shift(),i=k._queueHooks(e,t);"inprogress"===a&&(a=n.shift(),r--),a&&("fx"===t&&n.unshift("inprogress"),delete i.stop,a.call(e,(function(){k.dequeue(e,t)}),i)),!r&&i&&i.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return X.get(e,n)||X.access(e,n,{empty:k.Callbacks("once memory").add((function(){X.remove(e,[t+"queue",n])}))})}}),k.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?k.queue(this[0],e):void 0===t?this:this.each((function(){var n=k.queue(this,e,t);k._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&k.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){k.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,a=k.Deferred(),i=this,o=this.length,s=function(){--r||a.resolveWith(i,[i])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";o--;)(n=X.get(i[o],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),a.promise(t)}});var re=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ae=new RegExp("^(?:([+-])=|)("+re+")([a-z%]*)$","i"),ie=["Top","Right","Bottom","Left"],oe=A.documentElement,se=function(e){return k.contains(e.ownerDocument,e)},le={composed:!0};oe.getRootNode&&(se=function(e){return k.contains(e.ownerDocument,e)||e.getRootNode(le)===e.ownerDocument});var ue=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&se(e)&&"none"===k.css(e,"display")};function ce(e,t,n,r){var a,i,o=20,s=r?function(){return r.cur()}:function(){return k.css(e,t,"")},l=s(),u=n&&n[3]||(k.cssNumber[t]?"":"px"),c=e.nodeType&&(k.cssNumber[t]||"px"!==u&&+l)&&ae.exec(k.css(e,t));if(c&&c[3]!==u){for(l/=2,u=u||c[3],c=+l||1;o--;)k.style(e,t,c+u),(1-i)*(1-(i=s()/l||.5))<=0&&(o=0),c/=i;c*=2,k.style(e,t,c+u),n=n||[]}return n&&(c=+c||+l||0,a=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=u,r.start=c,r.end=a)),a}var de={};function fe(e){var t,n=e.ownerDocument,r=e.nodeName,a=de[r];return a||(t=n.body.appendChild(n.createElement(r)),a=k.css(t,"display"),t.parentNode.removeChild(t),"none"===a&&(a="block"),de[r]=a,a)}function he(e,t){for(var n,r,a=[],i=0,o=e.length;i<o;i++)(r=e[i]).style&&(n=r.style.display,t?("none"===n&&(a[i]=X.get(r,"display")||null,a[i]||(r.style.display="")),""===r.style.display&&ue(r)&&(a[i]=fe(r))):"none"!==n&&(a[i]="none",X.set(r,"display",n)));for(i=0;i<o;i++)null!=a[i]&&(e[i].style.display=a[i]);return e}k.fn.extend({show:function(){return he(this,!0)},hide:function(){return he(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){ue(this)?k(this).show():k(this).hide()}))}});var pe,ge,me=/^(?:checkbox|radio)$/i,ye=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,ve=/^$|^module$|\/(?:java|ecma)script/i;pe=A.createDocumentFragment().appendChild(A.createElement("div")),(ge=A.createElement("input")).setAttribute("type","radio"),ge.setAttribute("checked","checked"),ge.setAttribute("name","t"),pe.appendChild(ge),m.checkClone=pe.cloneNode(!0).cloneNode(!0).lastChild.checked,pe.innerHTML="<textarea>x</textarea>",m.noCloneChecked=!!pe.cloneNode(!0).lastChild.defaultValue,pe.innerHTML="<option></option>",m.option=!!pe.lastChild;var Ae={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function be(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&E(e,t)?k.merge([e],n):n}function xe(e,t){for(var n=0,r=e.length;n<r;n++)X.set(e[n],"globalEval",!t||X.get(t[n],"globalEval"))}Ae.tbody=Ae.tfoot=Ae.colgroup=Ae.caption=Ae.thead,Ae.th=Ae.td,m.option||(Ae.optgroup=Ae.option=[1,"<select multiple='multiple'>","</select>"]);var Se=/<|&#?\w+;/;function Ce(e,t,n,r,a){for(var i,o,s,l,u,c,d=t.createDocumentFragment(),f=[],h=0,p=e.length;h<p;h++)if((i=e[h])||0===i)if("object"===S(i))k.merge(f,i.nodeType?[i]:i);else if(Se.test(i)){for(o=o||d.appendChild(t.createElement("div")),s=(ye.exec(i)||["",""])[1].toLowerCase(),l=Ae[s]||Ae._default,o.innerHTML=l[1]+k.htmlPrefilter(i)+l[2],c=l[0];c--;)o=o.lastChild;k.merge(f,o.childNodes),(o=d.firstChild).textContent=""}else f.push(t.createTextNode(i));for(d.textContent="",h=0;i=f[h++];)if(r&&k.inArray(i,r)>-1)a&&a.push(i);else if(u=se(i),o=be(d.appendChild(i),"script"),u&&xe(o),n)for(c=0;i=o[c++];)ve.test(i.type||"")&&n.push(i);return d}var ke=/^key/,Me=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,we=/^([^.]*)(?:\.(.+)|)/;function Te(){return!0}function Be(){return!1}function Le(e,t){return e===function(){try{return A.activeElement}catch(e){}}()==("focus"===t)}function Ee(e,t,n,r,a,i){var o,s;if("object"==typeof t){for(s in"string"!=typeof n&&(r=r||n,n=void 0),t)Ee(e,s,n,r,t[s],i);return e}if(null==r&&null==a?(a=n,r=n=void 0):null==a&&("string"==typeof n?(a=r,r=void 0):(a=r,r=n,n=void 0)),!1===a)a=Be;else if(!a)return e;return 1===i&&(o=a,(a=function(e){return k().off(e),o.apply(this,arguments)}).guid=o.guid||(o.guid=k.guid++)),e.each((function(){k.event.add(this,t,a,r,n)}))}function De(e,t,n){n?(X.set(e,t,!1),k.event.add(e,t,{namespace:!1,handler:function(e){var r,a,i=X.get(this,t);if(1&e.isTrigger&&this[t]){if(i.length)(k.event.special[t]||{}).delegateType&&e.stopPropagation();else if(i=s.call(arguments),X.set(this,t,i),r=n(this,t),this[t](),i!==(a=X.get(this,t))||r?X.set(this,t,!1):a={},i!==a)return e.stopImmediatePropagation(),e.preventDefault(),a.value}else i.length&&(X.set(this,t,{value:k.event.trigger(k.extend(i[0],k.Event.prototype),i.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===X.get(e,t)&&k.event.add(e,t,Te)}k.event={global:{},add:function(e,t,n,r,a){var i,o,s,l,u,c,d,f,h,p,g,m=X.get(e);if(Y(e))for(n.handler&&(n=(i=n).handler,a=i.selector),a&&k.find.matchesSelector(oe,a),n.guid||(n.guid=k.guid++),(l=m.events)||(l=m.events=Object.create(null)),(o=m.handle)||(o=m.handle=function(t){return void 0!==k&&k.event.triggered!==t.type?k.event.dispatch.apply(e,arguments):void 0}),u=(t=(t||"").match(W)||[""]).length;u--;)h=g=(s=we.exec(t[u])||[])[1],p=(s[2]||"").split(".").sort(),h&&(d=k.event.special[h]||{},h=(a?d.delegateType:d.bindType)||h,d=k.event.special[h]||{},c=k.extend({type:h,origType:g,data:r,handler:n,guid:n.guid,selector:a,needsContext:a&&k.expr.match.needsContext.test(a),namespace:p.join(".")},i),(f=l[h])||((f=l[h]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(e,r,p,o)||e.addEventListener&&e.addEventListener(h,o)),d.add&&(d.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),a?f.splice(f.delegateCount++,0,c):f.push(c),k.event.global[h]=!0)},remove:function(e,t,n,r,a){var i,o,s,l,u,c,d,f,h,p,g,m=X.hasData(e)&&X.get(e);if(m&&(l=m.events)){for(u=(t=(t||"").match(W)||[""]).length;u--;)if(h=g=(s=we.exec(t[u])||[])[1],p=(s[2]||"").split(".").sort(),h){for(d=k.event.special[h]||{},f=l[h=(r?d.delegateType:d.bindType)||h]||[],s=s[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),o=i=f.length;i--;)c=f[i],!a&&g!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(f.splice(i,1),c.selector&&f.delegateCount--,d.remove&&d.remove.call(e,c));o&&!f.length&&(d.teardown&&!1!==d.teardown.call(e,p,m.handle)||k.removeEvent(e,h,m.handle),delete l[h])}else for(h in l)k.event.remove(e,h+t[u],n,r,!0);k.isEmptyObject(l)&&X.remove(e,"handle events")}},dispatch:function(e){var t,n,r,a,i,o,s=new Array(arguments.length),l=k.event.fix(e),u=(X.get(this,"events")||Object.create(null))[l.type]||[],c=k.event.special[l.type]||{};for(s[0]=l,t=1;t<arguments.length;t++)s[t]=arguments[t];if(l.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,l)){for(o=k.event.handlers.call(this,l,u),t=0;(a=o[t++])&&!l.isPropagationStopped();)for(l.currentTarget=a.elem,n=0;(i=a.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==i.namespace&&!l.rnamespace.test(i.namespace)||(l.handleObj=i,l.data=i.data,void 0!==(r=((k.event.special[i.origType]||{}).handle||i.handler).apply(a.elem,s))&&!1===(l.result=r)&&(l.preventDefault(),l.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,l),l.result}},handlers:function(e,t){var n,r,a,i,o,s=[],l=t.delegateCount,u=e.target;if(l&&u.nodeType&&!("click"===e.type&&e.button>=1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==e.type||!0!==u.disabled)){for(i=[],o={},n=0;n<l;n++)void 0===o[a=(r=t[n]).selector+" "]&&(o[a]=r.needsContext?k(a,this).index(u)>-1:k.find(a,this,null,[u]).length),o[a]&&i.push(r);i.length&&s.push({elem:u,handlers:i})}return u=this,l<t.length&&s.push({elem:u,handlers:t.slice(l)}),s},addProp:function(e,t){Object.defineProperty(k.Event.prototype,e,{enumerable:!0,configurable:!0,get:y(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[k.expando]?e:new k.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return me.test(t.type)&&t.click&&E(t,"input")&&De(t,"click",Te),!1},trigger:function(e){var t=this||e;return me.test(t.type)&&t.click&&E(t,"input")&&De(t,"click"),!0},_default:function(e){var t=e.target;return me.test(t.type)&&t.click&&E(t,"input")&&X.get(t,"click")||E(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},k.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},k.Event=function(e,t){if(!(this instanceof k.Event))return new k.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Te:Be,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&k.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[k.expando]=!0},k.Event.prototype={constructor:k.Event,isDefaultPrevented:Be,isPropagationStopped:Be,isImmediatePropagationStopped:Be,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Te,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Te,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Te,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},k.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&ke.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Me.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},k.event.addProp),k.each({focus:"focusin",blur:"focusout"},(function(e,t){k.event.special[e]={setup:function(){return De(this,e,Le),!1},trigger:function(){return De(this,e),!0},delegateType:t}})),k.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){k.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,a=e.relatedTarget,i=e.handleObj;return a&&(a===r||k.contains(r,a))||(e.type=i.origType,n=i.handler.apply(this,arguments),e.type=t),n}}})),k.fn.extend({on:function(e,t,n,r){return Ee(this,e,t,n,r)},one:function(e,t,n,r){return Ee(this,e,t,n,r,1)},off:function(e,t,n){var r,a;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,k(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(a in e)this.off(a,t,e[a]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Be),this.each((function(){k.event.remove(this,e,n,t)}))}});var Pe=/<script|<style|<link/i,Re=/checked\s*(?:[^=]|=\s*.checked.)/i,Ne=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function He(e,t){return E(e,"table")&&E(11!==t.nodeType?t:t.firstChild,"tr")&&k(e).children("tbody")[0]||e}function je(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function ze(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function We(e,t){var n,r,a,i,o,s;if(1===t.nodeType){if(X.hasData(e)&&(s=X.get(e).events))for(a in X.remove(t,"handle events"),s)for(n=0,r=s[a].length;n<r;n++)k.event.add(t,a,s[a][n]);Z.hasData(e)&&(i=Z.access(e),o=k.extend({},i),Z.set(t,o))}}function Fe(e,t){var n=t.nodeName.toLowerCase();"input"===n&&me.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function Ge(e,t,n,r){t=l(t);var a,i,o,s,u,c,d=0,f=e.length,h=f-1,p=t[0],g=y(p);if(g||f>1&&"string"==typeof p&&!m.checkClone&&Re.test(p))return e.each((function(a){var i=e.eq(a);g&&(t[0]=p.call(this,a,i.html())),Ge(i,t,n,r)}));if(f&&(i=(a=Ce(t,e[0].ownerDocument,!1,e,r)).firstChild,1===a.childNodes.length&&(a=i),i||r)){for(s=(o=k.map(be(a,"script"),je)).length;d<f;d++)u=a,d!==h&&(u=k.clone(u,!0,!0),s&&k.merge(o,be(u,"script"))),n.call(e[d],u,d);if(s)for(c=o[o.length-1].ownerDocument,k.map(o,ze),d=0;d<s;d++)u=o[d],ve.test(u.type||"")&&!X.access(u,"globalEval")&&k.contains(c,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?k._evalUrl&&!u.noModule&&k._evalUrl(u.src,{nonce:u.nonce||u.getAttribute("nonce")},c):x(u.textContent.replace(Ne,""),u,c))}return e}function Oe(e,t,n){for(var r,a=t?k.filter(t,e):e,i=0;null!=(r=a[i]);i++)n||1!==r.nodeType||k.cleanData(be(r)),r.parentNode&&(n&&se(r)&&xe(be(r,"script")),r.parentNode.removeChild(r));return e}k.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var r,a,i,o,s=e.cloneNode(!0),l=se(e);if(!(m.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||k.isXMLDoc(e)))for(o=be(s),r=0,a=(i=be(e)).length;r<a;r++)Fe(i[r],o[r]);if(t)if(n)for(i=i||be(e),o=o||be(s),r=0,a=i.length;r<a;r++)We(i[r],o[r]);else We(e,s);return(o=be(s,"script")).length>0&&xe(o,!l&&be(e,"script")),s},cleanData:function(e){for(var t,n,r,a=k.event.special,i=0;void 0!==(n=e[i]);i++)if(Y(n)){if(t=n[X.expando]){if(t.events)for(r in t.events)a[r]?k.event.remove(n,r):k.removeEvent(n,r,t.handle);n[X.expando]=void 0}n[Z.expando]&&(n[Z.expando]=void 0)}}}),k.fn.extend({detach:function(e){return Oe(this,e,!0)},remove:function(e){return Oe(this,e)},text:function(e){return J(this,(function(e){return void 0===e?k.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return Ge(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||He(this,e).appendChild(e)}))},prepend:function(){return Ge(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=He(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return Ge(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return Ge(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(k.cleanData(be(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return k.clone(this,e,t)}))},html:function(e){return J(this,(function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Pe.test(e)&&!Ae[(ye.exec(e)||["",""])[1].toLowerCase()]){e=k.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(k.cleanData(be(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return Ge(this,arguments,(function(t){var n=this.parentNode;k.inArray(this,e)<0&&(k.cleanData(be(this)),n&&n.replaceChild(t,this))}),e)}}),k.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){k.fn[e]=function(e){for(var n,r=[],a=k(e),i=a.length-1,o=0;o<=i;o++)n=o===i?this:this.clone(!0),k(a[o])[t](n),u.apply(r,n.get());return this.pushStack(r)}}));var Ke=new RegExp("^("+re+")(?!px)[a-z%]+$","i"),Ie=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=r),t.getComputedStyle(e)},qe=function(e,t,n){var r,a,i={};for(a in t)i[a]=e.style[a],e.style[a]=t[a];for(a in r=n.call(e),t)e.style[a]=i[a];return r},Je=new RegExp(ie.join("|"),"i");function Ve(e,t,n){var r,a,i,o,s=e.style;return(n=n||Ie(e))&&(""!==(o=n.getPropertyValue(t)||n[t])||se(e)||(o=k.style(e,t)),!m.pixelBoxStyles()&&Ke.test(o)&&Je.test(t)&&(r=s.width,a=s.minWidth,i=s.maxWidth,s.minWidth=s.maxWidth=s.width=o,o=n.width,s.width=r,s.minWidth=a,s.maxWidth=i)),void 0!==o?o+"":o}function $e(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(c){u.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",c.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",oe.appendChild(u).appendChild(c);var e=r.getComputedStyle(c);n="1%"!==e.top,l=12===t(e.marginLeft),c.style.right="60%",o=36===t(e.right),a=36===t(e.width),c.style.position="absolute",i=12===t(c.offsetWidth/3),oe.removeChild(u),c=null}}function t(e){return Math.round(parseFloat(e))}var n,a,i,o,s,l,u=A.createElement("div"),c=A.createElement("div");c.style&&(c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",m.clearCloneStyle="content-box"===c.style.backgroundClip,k.extend(m,{boxSizingReliable:function(){return e(),a},pixelBoxStyles:function(){return e(),o},pixelPosition:function(){return e(),n},reliableMarginLeft:function(){return e(),l},scrollboxSize:function(){return e(),i},reliableTrDimensions:function(){var e,t,n,a;return null==s&&(e=A.createElement("table"),t=A.createElement("tr"),n=A.createElement("div"),e.style.cssText="position:absolute;left:-11111px",t.style.height="1px",n.style.height="9px",oe.appendChild(e).appendChild(t).appendChild(n),a=r.getComputedStyle(t),s=parseInt(a.height)>3,oe.removeChild(e)),s}}))}();var _e=["Webkit","Moz","ms"],Ue=A.createElement("div").style,Ye={};function Qe(e){return k.cssProps[e]||Ye[e]||(e in Ue?e:Ye[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=_e.length;n--;)if((e=_e[n]+t)in Ue)return e}(e)||e)}var Xe=/^(none|table(?!-c[ea]).+)/,Ze=/^--/,et={position:"absolute",visibility:"hidden",display:"block"},tt={letterSpacing:"0",fontWeight:"400"};function nt(e,t,n){var r=ae.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function rt(e,t,n,r,a,i){var o="width"===t?1:0,s=0,l=0;if(n===(r?"border":"content"))return 0;for(;o<4;o+=2)"margin"===n&&(l+=k.css(e,n+ie[o],!0,a)),r?("content"===n&&(l-=k.css(e,"padding"+ie[o],!0,a)),"margin"!==n&&(l-=k.css(e,"border"+ie[o]+"Width",!0,a))):(l+=k.css(e,"padding"+ie[o],!0,a),"padding"!==n?l+=k.css(e,"border"+ie[o]+"Width",!0,a):s+=k.css(e,"border"+ie[o]+"Width",!0,a));return!r&&i>=0&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-i-l-s-.5))||0),l}function at(e,t,n){var r=Ie(e),a=(!m.boxSizingReliable()||n)&&"border-box"===k.css(e,"boxSizing",!1,r),i=a,o=Ve(e,t,r),s="offset"+t[0].toUpperCase()+t.slice(1);if(Ke.test(o)){if(!n)return o;o="auto"}return(!m.boxSizingReliable()&&a||!m.reliableTrDimensions()&&E(e,"tr")||"auto"===o||!parseFloat(o)&&"inline"===k.css(e,"display",!1,r))&&e.getClientRects().length&&(a="border-box"===k.css(e,"boxSizing",!1,r),(i=s in e)&&(o=e[s])),(o=parseFloat(o)||0)+rt(e,t,n||(a?"border":"content"),i,r,o)+"px"}function it(e,t,n,r,a){return new it.prototype.init(e,t,n,r,a)}k.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Ve(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var a,i,o,s=U(t),l=Ze.test(t),u=e.style;if(l||(t=Qe(s)),o=k.cssHooks[t]||k.cssHooks[s],void 0===n)return o&&"get"in o&&void 0!==(a=o.get(e,!1,r))?a:u[t];"string"==(i=typeof n)&&(a=ae.exec(n))&&a[1]&&(n=ce(e,t,a),i="number"),null!=n&&n==n&&("number"!==i||l||(n+=a&&a[3]||(k.cssNumber[s]?"":"px")),m.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),o&&"set"in o&&void 0===(n=o.set(e,n,r))||(l?u.setProperty(t,n):u[t]=n))}},css:function(e,t,n,r){var a,i,o,s=U(t);return Ze.test(t)||(t=Qe(s)),(o=k.cssHooks[t]||k.cssHooks[s])&&"get"in o&&(a=o.get(e,!0,n)),void 0===a&&(a=Ve(e,t,r)),"normal"===a&&t in tt&&(a=tt[t]),""===n||n?(i=parseFloat(a),!0===n||isFinite(i)?i||0:a):a}}),k.each(["height","width"],(function(e,t){k.cssHooks[t]={get:function(e,n,r){if(n)return!Xe.test(k.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?at(e,t,r):qe(e,et,(function(){return at(e,t,r)}))},set:function(e,n,r){var a,i=Ie(e),o=!m.scrollboxSize()&&"absolute"===i.position,s=(o||r)&&"border-box"===k.css(e,"boxSizing",!1,i),l=r?rt(e,t,r,s,i):0;return s&&o&&(l-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(i[t])-rt(e,t,"border",!1,i)-.5)),l&&(a=ae.exec(n))&&"px"!==(a[3]||"px")&&(e.style[t]=n,n=k.css(e,t)),nt(0,n,l)}}})),k.cssHooks.marginLeft=$e(m.reliableMarginLeft,(function(e,t){if(t)return(parseFloat(Ve(e,"marginLeft"))||e.getBoundingClientRect().left-qe(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),k.each({margin:"",padding:"",border:"Width"},(function(e,t){k.cssHooks[e+t]={expand:function(n){for(var r=0,a={},i="string"==typeof n?n.split(" "):[n];r<4;r++)a[e+ie[r]+t]=i[r]||i[r-2]||i[0];return a}},"margin"!==e&&(k.cssHooks[e+t].set=nt)})),k.fn.extend({css:function(e,t){return J(this,(function(e,t,n){var r,a,i={},o=0;if(Array.isArray(t)){for(r=Ie(e),a=t.length;o<a;o++)i[t[o]]=k.css(e,t[o],!1,r);return i}return void 0!==n?k.style(e,t,n):k.css(e,t)}),e,t,arguments.length>1)}}),k.Tween=it,it.prototype={constructor:it,init:function(e,t,n,r,a,i){this.elem=e,this.prop=n,this.easing=a||k.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=i||(k.cssNumber[n]?"":"px")},cur:function(){var e=it.propHooks[this.prop];return e&&e.get?e.get(this):it.propHooks._default.get(this)},run:function(e){var t,n=it.propHooks[this.prop];return this.options.duration?this.pos=t=k.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):it.propHooks._default.set(this),this}},it.prototype.init.prototype=it.prototype,it.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=k.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){k.fx.step[e.prop]?k.fx.step[e.prop](e):1!==e.elem.nodeType||!k.cssHooks[e.prop]&&null==e.elem.style[Qe(e.prop)]?e.elem[e.prop]=e.now:k.style(e.elem,e.prop,e.now+e.unit)}}},it.propHooks.scrollTop=it.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},k.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},k.fx=it.prototype.init,k.fx.step={};var ot,st,lt=/^(?:toggle|show|hide)$/,ut=/queueHooks$/;function ct(){st&&(!1===A.hidden&&r.requestAnimationFrame?r.requestAnimationFrame(ct):r.setTimeout(ct,k.fx.interval),k.fx.tick())}function dt(){return r.setTimeout((function(){ot=void 0})),ot=Date.now()}function ft(e,t){var n,r=0,a={height:e};for(t=t?1:0;r<4;r+=2-t)a["margin"+(n=ie[r])]=a["padding"+n]=e;return t&&(a.opacity=a.width=e),a}function ht(e,t,n){for(var r,a=(pt.tweeners[t]||[]).concat(pt.tweeners["*"]),i=0,o=a.length;i<o;i++)if(r=a[i].call(n,t,e))return r}function pt(e,t,n){var r,a,i=0,o=pt.prefilters.length,s=k.Deferred().always((function(){delete l.elem})),l=function(){if(a)return!1;for(var t=ot||dt(),n=Math.max(0,u.startTime+u.duration-t),r=1-(n/u.duration||0),i=0,o=u.tweens.length;i<o;i++)u.tweens[i].run(r);return s.notifyWith(e,[u,r,n]),r<1&&o?n:(o||s.notifyWith(e,[u,1,0]),s.resolveWith(e,[u]),!1)},u=s.promise({elem:e,props:k.extend({},t),opts:k.extend(!0,{specialEasing:{},easing:k.easing._default},n),originalProperties:t,originalOptions:n,startTime:ot||dt(),duration:n.duration,tweens:[],createTween:function(t,n){var r=k.Tween(e,u.opts,t,n,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(r),r},stop:function(t){var n=0,r=t?u.tweens.length:0;if(a)return this;for(a=!0;n<r;n++)u.tweens[n].run(1);return t?(s.notifyWith(e,[u,1,0]),s.resolveWith(e,[u,t])):s.rejectWith(e,[u,t]),this}}),c=u.props;for(function(e,t){var n,r,a,i,o;for(n in e)if(a=t[r=U(n)],i=e[n],Array.isArray(i)&&(a=i[1],i=e[n]=i[0]),n!==r&&(e[r]=i,delete e[n]),(o=k.cssHooks[r])&&"expand"in o)for(n in i=o.expand(i),delete e[r],i)n in e||(e[n]=i[n],t[n]=a);else t[r]=a}(c,u.opts.specialEasing);i<o;i++)if(r=pt.prefilters[i].call(u,e,c,u.opts))return y(r.stop)&&(k._queueHooks(u.elem,u.opts.queue).stop=r.stop.bind(r)),r;return k.map(c,ht,u),y(u.opts.start)&&u.opts.start.call(e,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),k.fx.timer(k.extend(l,{elem:e,anim:u,queue:u.opts.queue})),u}k.Animation=k.extend(pt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ce(n.elem,e,ae.exec(t),n),n}]},tweener:function(e,t){y(e)?(t=e,e=["*"]):e=e.match(W);for(var n,r=0,a=e.length;r<a;r++)n=e[r],pt.tweeners[n]=pt.tweeners[n]||[],pt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,a,i,o,s,l,u,c,d="width"in t||"height"in t,f=this,h={},p=e.style,g=e.nodeType&&ue(e),m=X.get(e,"fxshow");for(r in n.queue||(null==(o=k._queueHooks(e,"fx")).unqueued&&(o.unqueued=0,s=o.empty.fire,o.empty.fire=function(){o.unqueued||s()}),o.unqueued++,f.always((function(){f.always((function(){o.unqueued--,k.queue(e,"fx").length||o.empty.fire()}))}))),t)if(a=t[r],lt.test(a)){if(delete t[r],i=i||"toggle"===a,a===(g?"hide":"show")){if("show"!==a||!m||void 0===m[r])continue;g=!0}h[r]=m&&m[r]||k.style(e,r)}if((l=!k.isEmptyObject(t))||!k.isEmptyObject(h))for(r in d&&1===e.nodeType&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],null==(u=m&&m.display)&&(u=X.get(e,"display")),"none"===(c=k.css(e,"display"))&&(u?c=u:(he([e],!0),u=e.style.display||u,c=k.css(e,"display"),he([e]))),("inline"===c||"inline-block"===c&&null!=u)&&"none"===k.css(e,"float")&&(l||(f.done((function(){p.display=u})),null==u&&(c=p.display,u="none"===c?"":c)),p.display="inline-block")),n.overflow&&(p.overflow="hidden",f.always((function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]}))),l=!1,h)l||(m?"hidden"in m&&(g=m.hidden):m=X.access(e,"fxshow",{display:u}),i&&(m.hidden=!g),g&&he([e],!0),f.done((function(){for(r in g||he([e]),X.remove(e,"fxshow"),h)k.style(e,r,h[r])}))),l=ht(g?m[r]:0,r,f),r in m||(m[r]=l.start,g&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?pt.prefilters.unshift(e):pt.prefilters.push(e)}}),k.speed=function(e,t,n){var r=e&&"object"==typeof e?k.extend({},e):{complete:n||!n&&t||y(e)&&e,duration:e,easing:n&&t||t&&!y(t)&&t};return k.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in k.fx.speeds?r.duration=k.fx.speeds[r.duration]:r.duration=k.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){y(r.old)&&r.old.call(this),r.queue&&k.dequeue(this,r.queue)},r},k.fn.extend({fadeTo:function(e,t,n,r){return this.filter(ue).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var a=k.isEmptyObject(e),i=k.speed(t,n,r),o=function(){var t=pt(this,k.extend({},e),i);(a||X.get(this,"finish"))&&t.stop(!0)};return o.finish=o,a||!1===i.queue?this.each(o):this.queue(i.queue,o)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&this.queue(e||"fx",[]),this.each((function(){var t=!0,a=null!=e&&e+"queueHooks",i=k.timers,o=X.get(this);if(a)o[a]&&o[a].stop&&r(o[a]);else for(a in o)o[a]&&o[a].stop&&ut.test(a)&&r(o[a]);for(a=i.length;a--;)i[a].elem!==this||null!=e&&i[a].queue!==e||(i[a].anim.stop(n),t=!1,i.splice(a,1));!t&&n||k.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,n=X.get(this),r=n[e+"queue"],a=n[e+"queueHooks"],i=k.timers,o=r?r.length:0;for(n.finish=!0,k.queue(this,e,[]),a&&a.stop&&a.stop.call(this,!0),t=i.length;t--;)i[t].elem===this&&i[t].queue===e&&(i[t].anim.stop(!0),i.splice(t,1));for(t=0;t<o;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish}))}}),k.each(["toggle","show","hide"],(function(e,t){var n=k.fn[t];k.fn[t]=function(e,r,a){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(ft(t,!0),e,r,a)}})),k.each({slideDown:ft("show"),slideUp:ft("hide"),slideToggle:ft("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){k.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}})),k.timers=[],k.fx.tick=function(){var e,t=0,n=k.timers;for(ot=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||k.fx.stop(),ot=void 0},k.fx.timer=function(e){k.timers.push(e),k.fx.start()},k.fx.interval=13,k.fx.start=function(){st||(st=!0,ct())},k.fx.stop=function(){st=null},k.fx.speeds={slow:600,fast:200,_default:400},k.fn.delay=function(e,t){return e=k.fx&&k.fx.speeds[e]||e,t=t||"fx",this.queue(t,(function(t,n){var a=r.setTimeout(t,e);n.stop=function(){r.clearTimeout(a)}}))},function(){var e=A.createElement("input"),t=A.createElement("select").appendChild(A.createElement("option"));e.type="checkbox",m.checkOn=""!==e.value,m.optSelected=t.selected,(e=A.createElement("input")).value="t",e.type="radio",m.radioValue="t"===e.value}();var gt,mt=k.expr.attrHandle;k.fn.extend({attr:function(e,t){return J(this,k.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each((function(){k.removeAttr(this,e)}))}}),k.extend({attr:function(e,t,n){var r,a,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return void 0===e.getAttribute?k.prop(e,t,n):(1===i&&k.isXMLDoc(e)||(a=k.attrHooks[t.toLowerCase()]||(k.expr.match.bool.test(t)?gt:void 0)),void 0!==n?null===n?void k.removeAttr(e,t):a&&"set"in a&&void 0!==(r=a.set(e,n,t))?r:(e.setAttribute(t,n+""),n):a&&"get"in a&&null!==(r=a.get(e,t))?r:null==(r=k.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!m.radioValue&&"radio"===t&&E(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,a=t&&t.match(W);if(a&&1===e.nodeType)for(;n=a[r++];)e.removeAttribute(n)}}),gt={set:function(e,t,n){return!1===t?k.removeAttr(e,n):e.setAttribute(n,n),n}},k.each(k.expr.match.bool.source.match(/\w+/g),(function(e,t){var n=mt[t]||k.find.attr;mt[t]=function(e,t,r){var a,i,o=t.toLowerCase();return r||(i=mt[o],mt[o]=a,a=null!=n(e,t,r)?o:null,mt[o]=i),a}}));var yt=/^(?:input|select|textarea|button)$/i,vt=/^(?:a|area)$/i;function At(e){return(e.match(W)||[]).join(" ")}function bt(e){return e.getAttribute&&e.getAttribute("class")||""}function xt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(W)||[]}k.fn.extend({prop:function(e,t){return J(this,k.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[k.propFix[e]||e]}))}}),k.extend({prop:function(e,t,n){var r,a,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return 1===i&&k.isXMLDoc(e)||(t=k.propFix[t]||t,a=k.propHooks[t]),void 0!==n?a&&"set"in a&&void 0!==(r=a.set(e,n,t))?r:e[t]=n:a&&"get"in a&&null!==(r=a.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=k.find.attr(e,"tabindex");return t?parseInt(t,10):yt.test(e.nodeName)||vt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),m.optSelected||(k.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),k.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){k.propFix[this.toLowerCase()]=this})),k.fn.extend({addClass:function(e){var t,n,r,a,i,o,s,l=0;if(y(e))return this.each((function(t){k(this).addClass(e.call(this,t,bt(this)))}));if((t=xt(e)).length)for(;n=this[l++];)if(a=bt(n),r=1===n.nodeType&&" "+At(a)+" "){for(o=0;i=t[o++];)r.indexOf(" "+i+" ")<0&&(r+=i+" ");a!==(s=At(r))&&n.setAttribute("class",s)}return this},removeClass:function(e){var t,n,r,a,i,o,s,l=0;if(y(e))return this.each((function(t){k(this).removeClass(e.call(this,t,bt(this)))}));if(!arguments.length)return this.attr("class","");if((t=xt(e)).length)for(;n=this[l++];)if(a=bt(n),r=1===n.nodeType&&" "+At(a)+" "){for(o=0;i=t[o++];)for(;r.indexOf(" "+i+" ")>-1;)r=r.replace(" "+i+" "," ");a!==(s=At(r))&&n.setAttribute("class",s)}return this},toggleClass:function(e,t){var n=typeof e,r="string"===n||Array.isArray(e);return"boolean"==typeof t&&r?t?this.addClass(e):this.removeClass(e):y(e)?this.each((function(n){k(this).toggleClass(e.call(this,n,bt(this),t),t)})):this.each((function(){var t,a,i,o;if(r)for(a=0,i=k(this),o=xt(e);t=o[a++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else void 0!==e&&"boolean"!==n||((t=bt(this))&&X.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":X.get(this,"__className__")||""))}))},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+At(bt(n))+" ").indexOf(t)>-1)return!0;return!1}});var St=/\r/g;k.fn.extend({val:function(e){var t,n,r,a=this[0];return arguments.length?(r=y(e),this.each((function(n){var a;1===this.nodeType&&(null==(a=r?e.call(this,n,k(this).val()):e)?a="":"number"==typeof a?a+="":Array.isArray(a)&&(a=k.map(a,(function(e){return null==e?"":e+""}))),(t=k.valHooks[this.type]||k.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,a,"value")||(this.value=a))}))):a?(t=k.valHooks[a.type]||k.valHooks[a.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(a,"value"))?n:"string"==typeof(n=a.value)?n.replace(St,""):null==n?"":n:void 0}}),k.extend({valHooks:{option:{get:function(e){var t=k.find.attr(e,"value");return null!=t?t:At(k.text(e))}},select:{get:function(e){var t,n,r,a=e.options,i=e.selectedIndex,o="select-one"===e.type,s=o?null:[],l=o?i+1:a.length;for(r=i<0?l:o?i:0;r<l;r++)if(((n=a[r]).selected||r===i)&&!n.disabled&&(!n.parentNode.disabled||!E(n.parentNode,"optgroup"))){if(t=k(n).val(),o)return t;s.push(t)}return s},set:function(e,t){for(var n,r,a=e.options,i=k.makeArray(t),o=a.length;o--;)((r=a[o]).selected=k.inArray(k.valHooks.option.get(r),i)>-1)&&(n=!0);return n||(e.selectedIndex=-1),i}}}}),k.each(["radio","checkbox"],(function(){k.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=k.inArray(k(e).val(),t)>-1}},m.checkOn||(k.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),m.focusin="onfocusin"in r;var Ct=/^(?:focusinfocus|focusoutblur)$/,kt=function(e){e.stopPropagation()};k.extend(k.event,{trigger:function(e,t,n,a){var i,o,s,l,u,c,d,f,p=[n||A],g=h.call(e,"type")?e.type:e,m=h.call(e,"namespace")?e.namespace.split("."):[];if(o=f=s=n=n||A,3!==n.nodeType&&8!==n.nodeType&&!Ct.test(g+k.event.triggered)&&(g.indexOf(".")>-1&&(m=g.split("."),g=m.shift(),m.sort()),u=g.indexOf(":")<0&&"on"+g,(e=e[k.expando]?e:new k.Event(g,"object"==typeof e&&e)).isTrigger=a?2:3,e.namespace=m.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+m.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:k.makeArray(t,[e]),d=k.event.special[g]||{},a||!d.trigger||!1!==d.trigger.apply(n,t))){if(!a&&!d.noBubble&&!v(n)){for(l=d.delegateType||g,Ct.test(l+g)||(o=o.parentNode);o;o=o.parentNode)p.push(o),s=o;s===(n.ownerDocument||A)&&p.push(s.defaultView||s.parentWindow||r)}for(i=0;(o=p[i++])&&!e.isPropagationStopped();)f=o,e.type=i>1?l:d.bindType||g,(c=(X.get(o,"events")||Object.create(null))[e.type]&&X.get(o,"handle"))&&c.apply(o,t),(c=u&&o[u])&&c.apply&&Y(o)&&(e.result=c.apply(o,t),!1===e.result&&e.preventDefault());return e.type=g,a||e.isDefaultPrevented()||d._default&&!1!==d._default.apply(p.pop(),t)||!Y(n)||u&&y(n[g])&&!v(n)&&((s=n[u])&&(n[u]=null),k.event.triggered=g,e.isPropagationStopped()&&f.addEventListener(g,kt),n[g](),e.isPropagationStopped()&&f.removeEventListener(g,kt),k.event.triggered=void 0,s&&(n[u]=s)),e.result}},simulate:function(e,t,n){var r=k.extend(new k.Event,n,{type:e,isSimulated:!0});k.event.trigger(r,null,t)}}),k.fn.extend({trigger:function(e,t){return this.each((function(){k.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var n=this[0];if(n)return k.event.trigger(e,t,n,!0)}}),m.focusin||k.each({focus:"focusin",blur:"focusout"},(function(e,t){var n=function(e){k.event.simulate(t,e.target,k.event.fix(e))};k.event.special[t]={setup:function(){var r=this.ownerDocument||this.document||this,a=X.access(r,t);a||r.addEventListener(e,n,!0),X.access(r,t,(a||0)+1)},teardown:function(){var r=this.ownerDocument||this.document||this,a=X.access(r,t)-1;a?X.access(r,t,a):(r.removeEventListener(e,n,!0),X.remove(r,t))}}}));var Mt=r.location,wt={guid:Date.now()},Tt=/\?/;k.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new r.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||k.error("Invalid XML: "+e),t};var Bt=/\[\]$/,Lt=/\r?\n/g,Et=/^(?:submit|button|image|reset|file)$/i,Dt=/^(?:input|select|textarea|keygen)/i;function Pt(e,t,n,r){var a;if(Array.isArray(t))k.each(t,(function(t,a){n||Bt.test(e)?r(e,a):Pt(e+"["+("object"==typeof a&&null!=a?t:"")+"]",a,n,r)}));else if(n||"object"!==S(t))r(e,t);else for(a in t)Pt(e+"["+a+"]",t[a],n,r)}k.param=function(e,t){var n,r=[],a=function(e,t){var n=y(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!k.isPlainObject(e))k.each(e,(function(){a(this.name,this.value)}));else for(n in e)Pt(n,e[n],t,a);return r.join("&")},k.fn.extend({serialize:function(){return k.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=k.prop(this,"elements");return e?k.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!k(this).is(":disabled")&&Dt.test(this.nodeName)&&!Et.test(e)&&(this.checked||!me.test(e))})).map((function(e,t){var n=k(this).val();return null==n?null:Array.isArray(n)?k.map(n,(function(e){return{name:t.name,value:e.replace(Lt,"\r\n")}})):{name:t.name,value:n.replace(Lt,"\r\n")}})).get()}});var Rt=/%20/g,Nt=/#.*$/,Ht=/([?&])_=[^&]*/,jt=/^(.*?):[ \t]*([^\r\n]*)$/gm,zt=/^(?:GET|HEAD)$/,Wt=/^\/\//,Ft={},Gt={},Ot="*/".concat("*"),Kt=A.createElement("a");function It(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,a=0,i=t.toLowerCase().match(W)||[];if(y(n))for(;r=i[a++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function qt(e,t,n,r){var a={},i=e===Gt;function o(s){var l;return a[s]=!0,k.each(e[s]||[],(function(e,s){var u=s(t,n,r);return"string"!=typeof u||i||a[u]?i?!(l=u):void 0:(t.dataTypes.unshift(u),o(u),!1)})),l}return o(t.dataTypes[0])||!a["*"]&&o("*")}function Jt(e,t){var n,r,a=k.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((a[n]?e:r||(r={}))[n]=t[n]);return r&&k.extend(!0,e,r),e}Kt.href=Mt.href,k.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Mt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Mt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ot,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":k.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Jt(Jt(e,k.ajaxSettings),t):Jt(k.ajaxSettings,e)},ajaxPrefilter:It(Ft),ajaxTransport:It(Gt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var n,a,i,o,s,l,u,c,d,f,h=k.ajaxSetup({},t),p=h.context||h,g=h.context&&(p.nodeType||p.jquery)?k(p):k.event,m=k.Deferred(),y=k.Callbacks("once memory"),v=h.statusCode||{},b={},x={},S="canceled",C={readyState:0,getResponseHeader:function(e){var t;if(u){if(!o)for(o={};t=jt.exec(i);)o[t[1].toLowerCase()+" "]=(o[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=o[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return u?i:null},setRequestHeader:function(e,t){return null==u&&(e=x[e.toLowerCase()]=x[e.toLowerCase()]||e,b[e]=t),this},overrideMimeType:function(e){return null==u&&(h.mimeType=e),this},statusCode:function(e){var t;if(e)if(u)C.always(e[C.status]);else for(t in e)v[t]=[v[t],e[t]];return this},abort:function(e){var t=e||S;return n&&n.abort(t),M(0,t),this}};if(m.promise(C),h.url=((e||h.url||Mt.href)+"").replace(Wt,Mt.protocol+"//"),h.type=t.method||t.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(W)||[""],null==h.crossDomain){l=A.createElement("a");try{l.href=h.url,l.href=l.href,h.crossDomain=Kt.protocol+"//"+Kt.host!=l.protocol+"//"+l.host}catch(e){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=k.param(h.data,h.traditional)),qt(Ft,h,t,C),u)return C;for(d in(c=k.event&&h.global)&&0==k.active++&&k.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!zt.test(h.type),a=h.url.replace(Nt,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(Rt,"+")):(f=h.url.slice(a.length),h.data&&(h.processData||"string"==typeof h.data)&&(a+=(Tt.test(a)?"&":"?")+h.data,delete h.data),!1===h.cache&&(a=a.replace(Ht,"$1"),f=(Tt.test(a)?"&":"?")+"_="+wt.guid+++f),h.url=a+f),h.ifModified&&(k.lastModified[a]&&C.setRequestHeader("If-Modified-Since",k.lastModified[a]),k.etag[a]&&C.setRequestHeader("If-None-Match",k.etag[a])),(h.data&&h.hasContent&&!1!==h.contentType||t.contentType)&&C.setRequestHeader("Content-Type",h.contentType),C.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+Ot+"; q=0.01":""):h.accepts["*"]),h.headers)C.setRequestHeader(d,h.headers[d]);if(h.beforeSend&&(!1===h.beforeSend.call(p,C,h)||u))return C.abort();if(S="abort",y.add(h.complete),C.done(h.success),C.fail(h.error),n=qt(Gt,h,t,C)){if(C.readyState=1,c&&g.trigger("ajaxSend",[C,h]),u)return C;h.async&&h.timeout>0&&(s=r.setTimeout((function(){C.abort("timeout")}),h.timeout));try{u=!1,n.send(b,M)}catch(e){if(u)throw e;M(-1,e)}}else M(-1,"No Transport");function M(e,t,o,l){var d,f,A,b,x,S=t;u||(u=!0,s&&r.clearTimeout(s),n=void 0,i=l||"",C.readyState=e>0?4:0,d=e>=200&&e<300||304===e,o&&(b=function(e,t,n){for(var r,a,i,o,s=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(a in s)if(s[a]&&s[a].test(r)){l.unshift(a);break}if(l[0]in n)i=l[0];else{for(a in n){if(!l[0]||e.converters[a+" "+l[0]]){i=a;break}o||(o=a)}i=i||o}if(i)return i!==l[0]&&l.unshift(i),n[i]}(h,C,o)),!d&&k.inArray("script",h.dataTypes)>-1&&(h.converters["text script"]=function(){}),b=function(e,t,n,r){var a,i,o,s,l,u={},c=e.dataTypes.slice();if(c[1])for(o in e.converters)u[o.toLowerCase()]=e.converters[o];for(i=c.shift();i;)if(e.responseFields[i]&&(n[e.responseFields[i]]=t),!l&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=i,i=c.shift())if("*"===i)i=l;else if("*"!==l&&l!==i){if(!(o=u[l+" "+i]||u["* "+i]))for(a in u)if((s=a.split(" "))[1]===i&&(o=u[l+" "+s[0]]||u["* "+s[0]])){!0===o?o=u[a]:!0!==u[a]&&(i=s[0],c.unshift(s[1]));break}if(!0!==o)if(o&&e.throws)t=o(t);else try{t=o(t)}catch(e){return{state:"parsererror",error:o?e:"No conversion from "+l+" to "+i}}}return{state:"success",data:t}}(h,b,C,d),d?(h.ifModified&&((x=C.getResponseHeader("Last-Modified"))&&(k.lastModified[a]=x),(x=C.getResponseHeader("etag"))&&(k.etag[a]=x)),204===e||"HEAD"===h.type?S="nocontent":304===e?S="notmodified":(S=b.state,f=b.data,d=!(A=b.error))):(A=S,!e&&S||(S="error",e<0&&(e=0))),C.status=e,C.statusText=(t||S)+"",d?m.resolveWith(p,[f,S,C]):m.rejectWith(p,[C,S,A]),C.statusCode(v),v=void 0,c&&g.trigger(d?"ajaxSuccess":"ajaxError",[C,h,d?f:A]),y.fireWith(p,[C,S]),c&&(g.trigger("ajaxComplete",[C,h]),--k.active||k.event.trigger("ajaxStop")))}return C},getJSON:function(e,t,n){return k.get(e,t,n,"json")},getScript:function(e,t){return k.get(e,void 0,t,"script")}}),k.each(["get","post"],(function(e,t){k[t]=function(e,n,r,a){return y(n)&&(a=a||r,r=n,n=void 0),k.ajax(k.extend({url:e,type:t,dataType:a,data:n,success:r},k.isPlainObject(e)&&e))}})),k.ajaxPrefilter((function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")})),k._evalUrl=function(e,t,n){return k.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){k.globalEval(e,t,n)}})},k.fn.extend({wrapAll:function(e){var t;return this[0]&&(y(e)&&(e=e.call(this[0])),t=k(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return y(e)?this.each((function(t){k(this).wrapInner(e.call(this,t))})):this.each((function(){var t=k(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)}))},wrap:function(e){var t=y(e);return this.each((function(n){k(this).wrapAll(t?e.call(this,n):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){k(this).replaceWith(this.childNodes)})),this}}),k.expr.pseudos.hidden=function(e){return!k.expr.pseudos.visible(e)},k.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},k.ajaxSettings.xhr=function(){try{return new r.XMLHttpRequest}catch(e){}};var Vt={0:200,1223:204},$t=k.ajaxSettings.xhr();m.cors=!!$t&&"withCredentials"in $t,m.ajax=$t=!!$t,k.ajaxTransport((function(e){var t,n;if(m.cors||$t&&!e.crossDomain)return{send:function(a,i){var o,s=e.xhr();if(s.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(o in e.xhrFields)s[o]=e.xhrFields[o];for(o in e.mimeType&&s.overrideMimeType&&s.overrideMimeType(e.mimeType),e.crossDomain||a["X-Requested-With"]||(a["X-Requested-With"]="XMLHttpRequest"),a)s.setRequestHeader(o,a[o]);t=function(e){return function(){t&&(t=n=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?i(0,"error"):i(s.status,s.statusText):i(Vt[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=t(),n=s.onerror=s.ontimeout=t("error"),void 0!==s.onabort?s.onabort=n:s.onreadystatechange=function(){4===s.readyState&&r.setTimeout((function(){t&&n()}))},t=t("abort");try{s.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}})),k.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),k.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return k.globalEval(e),e}}}),k.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),k.ajaxTransport("script",(function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(r,a){t=k("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&a("error"===e.type?404:200,e.type)}),A.head.appendChild(t[0])},abort:function(){n&&n()}}}));var _t,Ut=[],Yt=/(=)\?(?=&|$)|\?\?/;k.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Ut.pop()||k.expando+"_"+wt.guid++;return this[e]=!0,e}}),k.ajaxPrefilter("json jsonp",(function(e,t,n){var a,i,o,s=!1!==e.jsonp&&(Yt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Yt.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return a=e.jsonpCallback=y(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(Yt,"$1"+a):!1!==e.jsonp&&(e.url+=(Tt.test(e.url)?"&":"?")+e.jsonp+"="+a),e.converters["script json"]=function(){return o||k.error(a+" was not called"),o[0]},e.dataTypes[0]="json",i=r[a],r[a]=function(){o=arguments},n.always((function(){void 0===i?k(r).removeProp(a):r[a]=i,e[a]&&(e.jsonpCallback=t.jsonpCallback,Ut.push(a)),o&&y(i)&&i(o[0]),o=i=void 0})),"script"})),m.createHTMLDocument=((_t=A.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===_t.childNodes.length),k.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(m.createHTMLDocument?((r=(t=A.implementation.createHTMLDocument("")).createElement("base")).href=A.location.href,t.head.appendChild(r)):t=A),i=!n&&[],(a=D.exec(e))?[t.createElement(a[1])]:(a=Ce([e],t,i),i&&i.length&&k(i).remove(),k.merge([],a.childNodes)));var r,a,i},k.fn.load=function(e,t,n){var r,a,i,o=this,s=e.indexOf(" ");return s>-1&&(r=At(e.slice(s)),e=e.slice(0,s)),y(t)?(n=t,t=void 0):t&&"object"==typeof t&&(a="POST"),o.length>0&&k.ajax({url:e,type:a||"GET",dataType:"html",data:t}).done((function(e){i=arguments,o.html(r?k("<div>").append(k.parseHTML(e)).find(r):e)})).always(n&&function(e,t){o.each((function(){n.apply(this,i||[e.responseText,t,e])}))}),this},k.expr.pseudos.animated=function(e){return k.grep(k.timers,(function(t){return e===t.elem})).length},k.offset={setOffset:function(e,t,n){var r,a,i,o,s,l,u=k.css(e,"position"),c=k(e),d={};"static"===u&&(e.style.position="relative"),s=c.offset(),i=k.css(e,"top"),l=k.css(e,"left"),("absolute"===u||"fixed"===u)&&(i+l).indexOf("auto")>-1?(o=(r=c.position()).top,a=r.left):(o=parseFloat(i)||0,a=parseFloat(l)||0),y(t)&&(t=t.call(e,n,k.extend({},s))),null!=t.top&&(d.top=t.top-s.top+o),null!=t.left&&(d.left=t.left-s.left+a),"using"in t?t.using.call(e,d):("number"==typeof d.top&&(d.top+="px"),"number"==typeof d.left&&(d.left+="px"),c.css(d))}},k.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){k.offset.setOffset(this,e,t)}));var t,n,r=this[0];return r?r.getClientRects().length?(t=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],a={top:0,left:0};if("fixed"===k.css(r,"position"))t=r.getBoundingClientRect();else{for(t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===k.css(e,"position");)e=e.parentNode;e&&e!==r&&1===e.nodeType&&((a=k(e).offset()).top+=k.css(e,"borderTopWidth",!0),a.left+=k.css(e,"borderLeftWidth",!0))}return{top:t.top-a.top-k.css(r,"marginTop",!0),left:t.left-a.left-k.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===k.css(e,"position");)e=e.offsetParent;return e||oe}))}}),k.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var n="pageYOffset"===t;k.fn[e]=function(r){return J(this,(function(e,r,a){var i;if(v(e)?i=e:9===e.nodeType&&(i=e.defaultView),void 0===a)return i?i[t]:e[r];i?i.scrollTo(n?i.pageXOffset:a,n?a:i.pageYOffset):e[r]=a}),e,r,arguments.length)}})),k.each(["top","left"],(function(e,t){k.cssHooks[t]=$e(m.pixelPosition,(function(e,n){if(n)return n=Ve(e,t),Ke.test(n)?k(e).position()[t]+"px":n}))})),k.each({Height:"height",Width:"width"},(function(e,t){k.each({padding:"inner"+e,content:t,"":"outer"+e},(function(n,r){k.fn[r]=function(a,i){var o=arguments.length&&(n||"boolean"!=typeof a),s=n||(!0===a||!0===i?"margin":"border");return J(this,(function(t,n,a){var i;return v(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+e],i["scroll"+e],t.body["offset"+e],i["offset"+e],i["client"+e])):void 0===a?k.css(t,n,s):k.style(t,n,a,s)}),t,o?a:void 0,o)}}))})),k.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){k.fn[t]=function(e){return this.on(t,e)}})),k.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),k.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){k.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}));var Qt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;k.proxy=function(e,t){var n,r,a;if("string"==typeof t&&(n=e[t],t=e,e=n),y(e))return r=s.call(arguments,2),(a=function(){return e.apply(t||this,r.concat(s.call(arguments)))}).guid=e.guid=e.guid||k.guid++,a},k.holdReady=function(e){e?k.readyWait++:k.ready(!0)},k.isArray=Array.isArray,k.parseJSON=JSON.parse,k.nodeName=E,k.isFunction=y,k.isWindow=v,k.camelCase=U,k.type=S,k.now=Date.now,k.isNumeric=function(e){var t=k.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},k.trim=function(e){return null==e?"":(e+"").replace(Qt,"")},void 0===(n=function(){return k}.apply(t,[]))||(e.exports=n);var Xt=r.jQuery,Zt=r.$;return k.noConflict=function(e){return r.$===k&&(r.$=Zt),e&&r.jQuery===k&&(r.jQuery=Xt),k},void 0===a&&(r.jQuery=r.$=k),k}))},150:function(e,t){var n,r;"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self&&self,void 0===(r="function"==typeof(n=function(e){"use strict";if("undefined"==typeof browser||Object.getPrototypeOf(browser)!==Object.prototype){const t="The message port closed before a response was received.",n="Returning a Promise is the preferred way to send a reply from an onMessage/onMessageExternal listener, as the sendResponse will be removed from the specs (See https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/onMessage)",r=e=>{const r={alarms:{clear:{minArgs:0,maxArgs:1},clearAll:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getAll:{minArgs:0,maxArgs:0}},bookmarks:{create:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},getChildren:{minArgs:1,maxArgs:1},getRecent:{minArgs:1,maxArgs:1},getSubTree:{minArgs:1,maxArgs:1},getTree:{minArgs:0,maxArgs:0},move:{minArgs:2,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeTree:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}},browserAction:{disable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},enable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},getBadgeBackgroundColor:{minArgs:1,maxArgs:1},getBadgeText:{minArgs:1,maxArgs:1},getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},openPopup:{minArgs:0,maxArgs:0},setBadgeBackgroundColor:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setBadgeText:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},browsingData:{remove:{minArgs:2,maxArgs:2},removeCache:{minArgs:1,maxArgs:1},removeCookies:{minArgs:1,maxArgs:1},removeDownloads:{minArgs:1,maxArgs:1},removeFormData:{minArgs:1,maxArgs:1},removeHistory:{minArgs:1,maxArgs:1},removeLocalStorage:{minArgs:1,maxArgs:1},removePasswords:{minArgs:1,maxArgs:1},removePluginData:{minArgs:1,maxArgs:1},settings:{minArgs:0,maxArgs:0}},commands:{getAll:{minArgs:0,maxArgs:0}},contextMenus:{remove:{minArgs:1,maxArgs:1},removeAll:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},cookies:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:1,maxArgs:1},getAllCookieStores:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},devtools:{inspectedWindow:{eval:{minArgs:1,maxArgs:2,singleCallbackArg:!1}},panels:{create:{minArgs:3,maxArgs:3,singleCallbackArg:!0}}},downloads:{cancel:{minArgs:1,maxArgs:1},download:{minArgs:1,maxArgs:1},erase:{minArgs:1,maxArgs:1},getFileIcon:{minArgs:1,maxArgs:2},open:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},pause:{minArgs:1,maxArgs:1},removeFile:{minArgs:1,maxArgs:1},resume:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},extension:{isAllowedFileSchemeAccess:{minArgs:0,maxArgs:0},isAllowedIncognitoAccess:{minArgs:0,maxArgs:0}},history:{addUrl:{minArgs:1,maxArgs:1},deleteAll:{minArgs:0,maxArgs:0},deleteRange:{minArgs:1,maxArgs:1},deleteUrl:{minArgs:1,maxArgs:1},getVisits:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1}},i18n:{detectLanguage:{minArgs:1,maxArgs:1},getAcceptLanguages:{minArgs:0,maxArgs:0}},identity:{launchWebAuthFlow:{minArgs:1,maxArgs:1}},idle:{queryState:{minArgs:1,maxArgs:1}},management:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},getSelf:{minArgs:0,maxArgs:0},setEnabled:{minArgs:2,maxArgs:2},uninstallSelf:{minArgs:0,maxArgs:1}},notifications:{clear:{minArgs:1,maxArgs:1},create:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:0},getPermissionLevel:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},pageAction:{getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},hide:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},permissions:{contains:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},request:{minArgs:1,maxArgs:1}},runtime:{getBackgroundPage:{minArgs:0,maxArgs:0},getPlatformInfo:{minArgs:0,maxArgs:0},openOptionsPage:{minArgs:0,maxArgs:0},requestUpdateCheck:{minArgs:0,maxArgs:0},sendMessage:{minArgs:1,maxArgs:3},sendNativeMessage:{minArgs:2,maxArgs:2},setUninstallURL:{minArgs:1,maxArgs:1}},sessions:{getDevices:{minArgs:0,maxArgs:1},getRecentlyClosed:{minArgs:0,maxArgs:1},restore:{minArgs:0,maxArgs:1}},storage:{local:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},managed:{get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1}},sync:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}}},tabs:{captureVisibleTab:{minArgs:0,maxArgs:2},create:{minArgs:1,maxArgs:1},detectLanguage:{minArgs:0,maxArgs:1},discard:{minArgs:0,maxArgs:1},duplicate:{minArgs:1,maxArgs:1},executeScript:{minArgs:1,maxArgs:2},get:{minArgs:1,maxArgs:1},getCurrent:{minArgs:0,maxArgs:0},getZoom:{minArgs:0,maxArgs:1},getZoomSettings:{minArgs:0,maxArgs:1},highlight:{minArgs:1,maxArgs:1},insertCSS:{minArgs:1,maxArgs:2},move:{minArgs:2,maxArgs:2},query:{minArgs:1,maxArgs:1},reload:{minArgs:0,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeCSS:{minArgs:1,maxArgs:2},sendMessage:{minArgs:2,maxArgs:3},setZoom:{minArgs:1,maxArgs:2},setZoomSettings:{minArgs:1,maxArgs:2},update:{minArgs:1,maxArgs:2}},topSites:{get:{minArgs:0,maxArgs:0}},webNavigation:{getAllFrames:{minArgs:1,maxArgs:1},getFrame:{minArgs:1,maxArgs:1}},webRequest:{handlerBehaviorChanged:{minArgs:0,maxArgs:0}},windows:{create:{minArgs:0,maxArgs:1},get:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:1},getCurrent:{minArgs:0,maxArgs:1},getLastFocused:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}}};if(0===Object.keys(r).length)throw new Error("api-metadata.json has not been included in browser-polyfill");class a extends WeakMap{constructor(e,t){super(t),this.createItem=e}get(e){return this.has(e)||this.set(e,this.createItem(e)),super.get(e)}}const i=(t,n)=>(...r)=>{e.runtime.lastError?t.reject(e.runtime.lastError):n.singleCallbackArg||r.length<=1&&!1!==n.singleCallbackArg?t.resolve(r[0]):t.resolve(r)},o=e=>1==e?"argument":"arguments",s=(e,t,n)=>new Proxy(t,{apply:(t,r,a)=>n.call(r,e,...a)});let l=Function.call.bind(Object.prototype.hasOwnProperty);const u=(e,t={},n={})=>{let r=Object.create(null),a={has:(t,n)=>n in e||n in r,get(a,c,d){if(c in r)return r[c];if(!(c in e))return;let f=e[c];if("function"==typeof f)if("function"==typeof t[c])f=s(e,e[c],t[c]);else if(l(n,c)){let t=((e,t)=>function(n,...r){if(r.length<t.minArgs)throw new Error(`Expected at least ${t.minArgs} ${o(t.minArgs)} for ${e}(), got ${r.length}`);if(r.length>t.maxArgs)throw new Error(`Expected at most ${t.maxArgs} ${o(t.maxArgs)} for ${e}(), got ${r.length}`);return new Promise(((a,o)=>{if(t.fallbackToNoCallback)try{n[e](...r,i({resolve:a,reject:o},t))}catch(i){console.warn(e+" API method doesn't seem to support the callback parameter, falling back to call it without a callback: ",i),n[e](...r),t.fallbackToNoCallback=!1,t.noCallback=!0,a()}else t.noCallback?(n[e](...r),a()):n[e](...r,i({resolve:a,reject:o},t))}))})(c,n[c]);f=s(e,e[c],t)}else f=f.bind(e);else if("object"==typeof f&&null!==f&&(l(t,c)||l(n,c)))f=u(f,t[c],n[c]);else{if(!l(n,"*"))return Object.defineProperty(r,c,{configurable:!0,enumerable:!0,get:()=>e[c],set(t){e[c]=t}}),f;f=u(f,t[c],n["*"])}return r[c]=f,f},set:(t,n,a,i)=>(n in r?r[n]=a:e[n]=a,!0),defineProperty:(e,t,n)=>Reflect.defineProperty(r,t,n),deleteProperty:(e,t)=>Reflect.deleteProperty(r,t)},c=Object.create(e);return new Proxy(c,a)},c=e=>({addListener(t,n,...r){t.addListener(e.get(n),...r)},hasListener:(t,n)=>t.hasListener(e.get(n)),removeListener(t,n){t.removeListener(e.get(n))}});let d=!1;const f=new a((e=>"function"!=typeof e?e:function(t,r,a){let i,o,s=!1,l=new Promise((e=>{i=function(t){d||(console.warn(n,(new Error).stack),d=!0),s=!0,e(t)}}));try{o=e(t,r,i)}catch(e){o=Promise.reject(e)}const u=!0!==o&&((c=o)&&"object"==typeof c&&"function"==typeof c.then);var c;if(!0!==o&&!u&&!s)return!1;return(u?o:l).then((e=>{a(e)}),(e=>{let t;t=e&&(e instanceof Error||"string"==typeof e.message)?e.message:"An unexpected error occurred",a({__mozWebExtensionPolyfillReject__:!0,message:t})})).catch((e=>{console.error("Failed to send onMessage rejected reply",e)})),!0})),h=({reject:n,resolve:r},a)=>{e.runtime.lastError?e.runtime.lastError.message===t?r():n(e.runtime.lastError):a&&a.__mozWebExtensionPolyfillReject__?n(new Error(a.message)):r(a)},p=(e,t,n,...r)=>{if(r.length<t.minArgs)throw new Error(`Expected at least ${t.minArgs} ${o(t.minArgs)} for ${e}(), got ${r.length}`);if(r.length>t.maxArgs)throw new Error(`Expected at most ${t.maxArgs} ${o(t.maxArgs)} for ${e}(), got ${r.length}`);return new Promise(((e,t)=>{const a=h.bind(null,{resolve:e,reject:t});r.push(a),n.sendMessage(...r)}))},g={runtime:{onMessage:c(f),onMessageExternal:c(f),sendMessage:p.bind(null,"sendMessage",{minArgs:1,maxArgs:3})},tabs:{sendMessage:p.bind(null,"sendMessage",{minArgs:2,maxArgs:3})}},m={clear:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}};return r.privacy={network:{"*":m},services:{"*":m},websites:{"*":m}},u(e,g,r)};if("object"!=typeof chrome||!chrome||!chrome.runtime||!chrome.runtime.id)throw new Error("This script should only be loaded in a browser extension.");e.exports=r(chrome)}else e.exports=browser})?n.apply(t,[e]):n)||(e.exports=r)}},t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={exports:{}};return e[r].call(a.exports,a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";var e=n(150),t=n.n(e);const r="auto-capitalise-extension";var a=n(755);function i(e){t().storage.local.set({should_capitalise_i:e})}function o(){var e=a("#sites").val();return e?e.split("\n"):[]}t().storage.local.get("sites_to_ignore").then((function(e){var t=e.sites_to_ignore;t&&a("#sites").val(t.join("\n"))}),(function(e){console.log(e)})),a(document).on("click."+r,"#ignoreSiteButton",(function(){t().tabs.query({currentWindow:!0,active:!0}).then((e=>{var n,r,i=(n=e[0].url,(r=document.createElement("a")).href=n,r.hostname),s=o();s.push(i),t().storage.local.set({sites_to_ignore:s}),a("#sites").val(s.join("\n")),a(this).prop("disabled",!0),a(this).val("Site added to ignore list")}))})),a(document).on("click."+r,"#submitButton",(function(){var e=o();t().storage.local.set({sites_to_ignore:e}),a(this).prop("disabled",!0),a(this).val("Saved")})),t().storage.local.get("should_capitalise_i").then((e=>{const t=e.should_capitalise_i;!0===t||void 0===t?(a("#shouldCapitaliseI").prop("checked",!0),i(!0)):(a("#shouldCapitaliseI").prop("checked",!1),i(!1))})),a(document).on("change."+r,"#shouldCapitaliseI",(function(e){a(e.target).prop("checked")?i(!0):i(!1)})),a("#sites").on("input."+r,(function(){a("#submitButton").prop("disabled",!1)}))})(),(()=>{"use strict";["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"].concat(["January","February","April","June","July","August","September","October","November","December"],["AFAIK","AKA","API","ATM","BTW","DIY","FAQ","FTW","FYI","ICYMI","IDK","IMO","IOW","ITT","LOL","MMW","OMG","OTOH","POV","ROTFL","RSVP","TBA","TBC","TGIF","THX","TIA","TTYL","USB","WTF","WTH"],["AMD","AOL","AWS","Aaliyah","Abbott","Abby","Abdul","Abe","Abelson","Abernathy","Abner","Abram","Abrams","Accenture","Acevedo","Achebe","Acheson","Acosta","Acrux","Acuff","Ada","Adan","Adderley","Addie","Adela","Adele","Adeline","Adhara","Adidas","Adirondack","Adkins","Adolf","Adolfo","Adolph","Adrian","Adriana","Adrienne","Advil","Aelfric","Aeroflot","Agassi","Agassiz","Agatha","Agnew","Agrippina","Aguilar","Aguinaldo","Aguirre","Agustin","Ahmad","Ahmadinejad","Ahmed","Aida","Aileen","Aimee","Aires","Akhmatova","Akiva","Alamogordo","Alan","Alana","Alberio","Alberto","Albireo","Alcindor","Alcmena","Alcoa","Alderamin","Aldo","Aldrin","Alec","Aleichem","Alejandra","Alejandro","Alembert","Alex","Alexei","Alexis","Alfonso","Alfonzo","Alford","Alfreda","Algenib","Algieba","Alhena","Alice","Alicia","Alighieri","Aline","Alioth","Alisa","Alisha","Alison","Alissa","Alistair","Alkaid","Allan","Allegra","Allende","Allie","Allison","Allstate","Allyson","Alma","Almach","Almohad","Almoravid","Alnilam","Alnitak","Alonzo","Alpert","Alphard","Alphecca","Alpheratz","Alphonse","Alphonso","Alpo","Alsop","Alston","Altaba","Altai","Althea","Altiplano","Altman","Altoids","Alton","Aludra","Alvarado","Alvarez","Alvaro","Alvin","Alyce","Alyson","Alyssa","Alzheimer","Amadeus","Amado","Amalia","Amanda","Amaru","Amaterasu","Amber","Amelia","Amenhotep","Ameslan","Amgen","Amie","Amiga","Amoco","Amparo","Ampere","Amway","Amy","Ana","Anabel","Anacin","Analects","Anatole","Andre","Andrea","Andrei","Andres","Andretti","Andrianampoinimerina","Android","Andy","Angel","Angela","Angeles","Angelia","Angelina","Angeline","Angelique","Angelita","Angelo","Angie","Aniakchak","Anibal","Anita","Ann","Annabel","Annabelle","Annette","Annie","Annmarie","Anselmo","Anshan","Anthropocene","Antipas","Antoine","Anton","Antone","Antonia","Antonio","Antwan","Apalachicola","Apatosaurus","Aquafresh","Aquino","Araceli","Arafat","Araguaya","Aral","Aramco","Arbin","Arbitron","Archibald","Archie","Arduino","Argonne","Arlene","Arline","Armand","Armando","Armani","Armonk","Armour","Arneb","Arnulfo","Aron","Arron","Artaxerxes","Artie","Arturo","Asama","Ascella","Ashikaga","Ashlee","Ashley","Ashmolean","Aspell","Aspen","Asperger","Aspidiske","Assad","Astana","Atacama","Atari","AtatÃ¼rk","Athabasca","Atkins","Atlantes","Atria","Atwood","Audi","Audion","Audra","Audrey","Aurelia","Aurelio","Ava","Avery","Avila","Avior","Avis","Ayala","Ayyubid","Azana","Azania","Aztlan","BBB","BMW","BP","BSD","Baath","Bacall","Backus","Baffin","Bahama","Baidu","Bailey","Balearic","Ballard","Bambi","Banach","Bancroft","Banjarmasin","Banneker","Baotou","Baptiste","Barack","Barbara","Barbarella","Barbour","Barbra","Barclay","Bardeen","Barents","Barker","Barkley","Barlow","Barnaby","Barnes","Barnett","Barney","Barr","Barrera","Barrett","Barron","Bartholdi","Bashie","Basho","Bass","Bastille","Batman","Battle","Batu","Baudouin","Baxter","Bayer","Bayes","Bayeux","Baylor","Baywatch","Beach","Bean","Beard","Beardmore","Bearnaise","Beasley","Beatlemania","Beatles","Beatrice","Beatrix","Beatriz","Beauregard","Bechtel","Beck","Becker","Becky","Beebe","Beefaroni","Beeton","Bekesy","Bela","Belau","Belem","Belinda","Bella","Bellamy","Bellatrix","Belmont","Belushi","Ben","Benacerraf","Benchley","Bender","Bendix","Benetton","Benita","Benito","Bennie","Benny","Benson","Berenice","Beretta","Berger","Berle","Berlitz","Bernadine","Bernanke","Bernardo","Bernays","Bernbach","Bernice","Bernie","Berra","Bert","Berta","Bertelsmann","Bertha","Bertie","Bertillon","Bertram","Bertrand","Beryl","Bessemer","Beth","Betsy","Bette","Bettie","Betty","Bettye","Beverley","Beverly","Bhutto","Bianca","Bic","Biden","BigQuery","Biggles","Biko","Bilbo","Billie","Billy","Bimini","Biogen","Bioko","Birdseye","Biscayne","Bismark","Bisquick","BitTorrent","Bjerknes","Bjork","Blaine","Blair","Blanca","Blanchard","Blanche","Blankenship","Blantyre","Blatz","Blevins","Blockbuster","Blondel","Blondie","Bloomingdale","Blu","Blucher","Bluetooth","Blythe","Boas","Bobbi","Bobbie","Bobbitt","Bobby","Bodhidharma","Boeing","Bojangles","Bollywood","Bolshoi","Bonhoeffer","Bonita","Bonner","Bonneville","Bonnie","Bono","Booker","Borden","Bordon","Borg","Boris","Bork","Borlaug","Borobudur","Boru","Botox","Boulez","Bourbaki","Bovary","Bowditch","Bowell","Bowen","Bowers","Bowman","Boyer","BoÃ¶tes","Brad","Braddock","Bradly","Bradshaw","Bradstreet","Brahmagupta","Brain","Brampton","Bran","Branch","Branden","Brandi","Brandie","Brandon","Brant","Brattain","Brazos","Breakspear","Breckenridge","Brenda","Brendan","Brennan","Brenner","Brent","Brenton","Bret","Brett","Brewer","Brexit","Brian","Briana","Brianna","Brice","Bridalveil","Bridger","Bridgett","Bridgette","Brigham","Brigitte","Brinkley","Britannica","Britney","Britt","Brittney","Brobdingnag","Brock","Brokaw","Bronson","Brontosaurus","Brooks","Brownian","Brummel","Brunhilde","Brut","Bryce","Brynner","Bryon","Brzezinski","Buchwald","Buckley","Buckner","Budweiser","Buffy","Buford","Bugatti","Bugzilla","Buick","Bulgari","Bullock","Bullwinkle","Bultmann","Bumppo","Bundesbank","Bunker","Burch","Burks","Burl","Burris","Burt","Busch","Bushnell","Butterfingers","BuÃ±uel","Byblos","Byers","CSS","CVS","Cabrera","Cadiz","Caedmon","Cagney","Cahokia","Caitlin","Calderon","Caleb","Callahan","Callie","Caloocan","Camacho","Cameron","Camilla","Camille","Camoens","Campanella","Camry","Canaries","Cancun","Candace","Candice","Candide","Cannon","Canon","Cantor","Cantrell","Cantu","Capek","Capetown","Caph","Capistrano","Capulet","Cara","Cardenas","Cardin","Cardozo","Carissa","Carl","Carla","Carlene","Carlin","Carlo","Carlson","Carly","Carmela","Carmella","Carmelo","Carmen","Carmichael","Carmine","Carnation","Carney","Carole","Carolyn","Carpathian","Carpathians","Carr","Carranza","Carrie","Carrier","Carrillo","Casandra","Cascades","Case","Casey","Casio","Cassie","Cassius","Castaneda","Castillo","Catalina","Cathleen","Cathryn","Cathy","Catskill","Cayman","Ceausescu","Cebu","Cebuano","Cecelia","Cecile","Cecily","Cedric","Celeste","Celgene","Celia","Celina","Cerf","Cesar","Cessna","Chaitanya","Chaitin","Challenger","Chan","Chandon","Chandra","Chandrasekhar","Chaney","Chappaquiddick","Chapultepec","Charbray","Charity","Charlene","Charmaine","Charmin","Chasity","Chattahoochee","Chatterley","Chauncey","Chavez","Chayefsky","Che","Chechnya","Cheer","Cheerios","Cheetos","Chen","Cheney","Chennai","Cheri","Cherie","Chernenko","Chernobyl","Chernomyrdin","Cheryl","Chevrolet","Chevron","Chevy","Chi","Chiclets","Chimu","Chiquita","Chisholm","Chivas","Chopra","Chretien","Chris","Christa","Christensen","Christi","Christine","Christoper","Chrysler","Chung","Churriguera","Cindy","CinemaScope","Cisco","Citibank","Citigroup","Citroen","Claiborne","Clair","Claire","Clairol","Clancy","Clapeyron","Clapton","Clara","Clarence","Clarice","Clarissa","Clarke","Claude","Claudette","Claudia","Claudine","Claudio","Claudius","Claus","Clayton","Clearasil","Clem","Clement","Clementine","Clements","Clemons","Clemson","Cleo","Cliburn","Cliff","Clifton","Cline","Clint","Clojure","Clorets","Clorox","Closure","Clouseau","Cobain","Cochran","Coffey","Coleen","Coleman","Colfax","Colgate","Colin","Colleen","Collier","Collin","Combs","Compaq","CompuServe","Conan","Concetta","Conley","Conner","Connery","Connie","Connolly","Conrail","Consuelo","Contreras","Cooke","Cooley","Cooperstown","Coors","Copacabana","Copeland","Copperfield","Coppertone","Coppola","Cordelia","Corey","Corina","Corine","Corinne","Coriolis","Corleone","Cormack","Cornelia","Cornelius","Cornell","Corning","Corrine","Corvallis","Corvette","Cory","Cosby","CosmosDB","Costco","Costello","Costner","Coulter","Courtney","Cozumel","Craft","Crawford","Crayola","Crecy","Creighton","Cressida","Crisco","Cristina","Cronin","Cronkite","Crowley","Crusoe","Cruz","Cryptozoic","Crystal","Csonka","Cthulhu","Cuchulain","Cullen","Cunard","Cunningham","Currier","Curt","Curtis","Cuvier","Cymbeline","Cyrano","Czechia","Daimler","Dalai","Daley","Dalian","Damian","Damion","Damon","Dangerfield","Danial","Danielle","Dannie","Danny","Danone","Darby","Darcy","Daren","Darin","Dario","Darla","Darlene","Darnell","Darrel","Darrell","Darren","Darrin","Darryl","Darth","Daryl","Daugherty","Dave","Davidson","Dawn","DeGeneres","Deadhead","Deana","Deandre","Deann","Deanna","Deanne","Debbie","Debby","Debian","Debora","Debouillet","Debra","Decca","Dedekind","Deena","Deere","Deidre","Dejesus","Delacruz","Delaney","Delano","Delbert","Deleon","Delia","Dell","Della","Delmar","Delmarva","Delmer","Delores","Deloris","Demetrius","Deming","Dena","Denebola","Deng","Denis","Denise","Dennis","Denny","Denuka","Deon","Depp","Derek","Derick","Derrick","Derrida","Desdemona","Desiree","Desmond","Devin","Dewayne","Dewitt","DiCaprio","Diane","Diann","Dianna","Dianne","Dickerson","Dickson","Didrikson","Diego","Diem","Dijkstra","Dilbert","Dillard","Dillinger","Dillon","Dina","Dino","Dion","Dionne","Diophantine","Dipper","Dirk","Diwali","Dixon","Django","Dmitri","Dobbin","Doctorow","Dodge","Dodoma","Dodson","Dollie","Dolly","Dolores","Domesday","Domingo","Dominguez","Donahue","Donald","Donaldson","Donizetti","Donn","Donnell","Donner","Donnie","Donny","Donovan","Dooley","Doonesbury","Dora","Doreen","Doritos","Dorothea","Dorothy","Dorsey","Dorthy","Dotson","Douay","Doubleday","Doug","Downy","Drano","Dristan","Dropbox","Drudge","Drupal","Dschubba","Duane","Dubcek","Dubhe","Duffy","Duke","Dumbledore","Dumbo","Dunlap","Dunn","Dunne","Duracell","Duran","Durante","Durex","Durocher","Duse","Dustbuster","Dustin","Dusty","Dwayne","Dwight","Dyer","DynamoDB","Dyson","Dzerzhinsky","ECMAScript","Earle","Earlene","Earline","Earnest","Earnestine","Earnhardt","Earp","Eastwood","Eaton","Eben","Ebeneezer","Ebony","Eco","Ed","Eddie","Edgardo","Edith","Edmond","Edmund","Edna","Eduardo","Edwardo","Edwina","Eeyore","Effie","Efrain","Efren","Eggo","Ehrenberg","Eileen","Eisner","Elanor","Elasticsearch","Elastoplast","Eldon","Eleanor","Eleazar","Elena","Elinor","Elisa","Elise","Eliseo","Eliza","Ella","Ellen","Ellesmere","Ellie","Elliot","Elliott","Ellison","Elma","Elmer","Elmo","Elnath","Elnora","Eloise","Eloy","Elroy","Elsa","Elsie","Eltanin","Elton","Elva","Elvia","Elvin","Elvira","Elvis","Elway","Elwood","ElysÃ©e","Emacs","Emanuel","Emery","Emil","Emile","Emilia","Emilio","Emily","Eminem","Emma","Emmett","Emory","Encarta","Enif","Enkidu","Enrico","Enrique","Enron","Enterprise","Epcot","Epimethius","Epson","Erewhon","Eric","Erica","Erich","Erick","Ericka","Erickson","Erik","Erika","Erlang","Erlenmeyer","Erma","Erna","Ernest","Ernestine","Ernesto","Ernie","Errol","ErvIn","Erwin","Escher","Escherichia","Esmeralda","Esperanza","Espinoza","Essie","Esteban","Estela","Estella","Estelle","Ester","EsterhÃ¡zy","Estrada","Ethan","Ethel","Ethelred","Etta","Eugenia","Eugenie","Eugenio","Eula","Eunice","Eustachian","Eva","Evan","Evangelina","Evangeline","EverReady","Everett","Everette","Evert","Evian","Evita","Ewing","Excedrin","Exocet","Exxon","Eyck","Eysenck","FDR","FNMA","FSF","Facebook","Faeroe","Fahd","Faisal","Falkland","Falklands","Fallopian","Falstaff","Falwell","Fannie","Fanny","Farley","Farrakhan","Farrell","Farrow","Fassbinder","Fatah","Fauntleroy","Faustino","Faustus","Faye","Federico","Felecia","Felice","Felicia","Felicity","Felipe","Felix","Ferber","Ferguson","Ferlinghetti","Fernandez","Fernando","Ferrari","Ferraro","Ferrell","Ferris","Feynman","Fiat","Fibonacci","Fidel","Fido","Figaro","Figueroa","Finch","Finley","Finnbogadottir","Finnegan","Fiona","Firebase","Firefox","Firestone","Fisk","Fitch","Fitzpatrick","Fitzroy","Fizeau","Flanagan","Flatt","Fleischer","Flintstones","Flo","Florine","Florsheim","Flory","Flossie","Flowers","Flynn","Folgers","Foosball","Foreman","Forest","Fosse","Fotomat","Fourneyron","Fran","Francine","Francisca","Francisco","Francois","Francoise","Frankel","Frankie","Franny","Franz","Frazier","Fred","Freda","Freddie","Freddy","Frederic","Fredric","Fredrick","Freeman","Freida","Fresnel","Frieda","Friedmann","Frigga","Frito","Fritz","Frontenac","Frye","Fuchs","Fujitsu","Fujiwara","Fukuyama","FurtwÃ¤ngler","Fuzhou","GE","GNU","GTE","Gabriela","Gabrielle","Gacrux","Gadsden","Gail","Gaiman","Gaines","Galapagos","Gallagher","Gallegos","Gallo","Galois","Galveston","Gamble","Gamow","Gangtok","Gantry","Garcia","Gardner","Gareth","Garfunkel","Garrett","Garry","Garth","Garza","Gatling","Gatorade","Gatsby","Gatun","Gavin","Gayle","Gdansk","Geffen","Gelbvieh","Geller","Gena","Genaro","Gene","Genet","Genevieve","Genghis","Gentry","Geoffrey","Georgina","Gerald","Geraldine","Gerard","Gerardo","Gerber","Gere","Geritol","Gerry","Gertrude","Ghazvanid","Giannini","Giauque","Gibbs","Gienah","Gil","Gila","Gilberto","Gilchrist","Gilda","Giles","Gillette","Gilliam","Gillian","Gilligan","Gilmore","Gina","Ginger","Gingrich","Ginny","Gino","Ginsburg","Ginsu","Giovanni","Giselle","GitHub","Giuliani","Giuseppe","Gladys","Glass","Glastonbury","Glaxo","Gleason","Glen","Glenda","Glenlivet","Glenna","Glover","Godot","Godzilla","Goethals","Goff","Goiania","Golan","Golda","Goldberg","Golden","Goldie","Goldilocks","Goldman","Goldwater","Gomez","Gondwanaland","Gonzalez","Gonzalo","Goodall","Goodrich","Goodwin","Google","Goolagong","Gordian","Goren","Gorey","Gorgas","Grable","Graceland","Gracie","Graciela","Grady","Graffias","Grafton","Grampians","Greenpeace","Greensleeves","Greenspan","Greer","Greg","Gregg","Gregorio","Greta","Gretchen","Gretel","Gretzky","Griffin","Grinch","Grover","Grumman","GrÃ¼newald","Guadalupe","Guallatiri","Guantanamo","Guarnieri","Gucci","Guerra","Guillermo","Gulliver","Gumbel","Guofeng","Gupta","Gus","Gustav","Gustavo","Gustavus","Gutierrez","Guzman","Gwen","Gwendoline","Gwendolyn","GÃ¶del","GÃ¶teborg","HBO","HBase","HSBC","Haas","Haber","Hadar","Hadoop","Hafiz","Hakka","Hal","Haley","Halliburton","Hallie","Hallmark","Halon","Haman","Hamilcar","Hamill","Hamlin","Hammett","Haney","Hangjit","Hangul","Hanna","Hansel","Hansen","Hanson","Hardin","Harlan","Harmon","Harold","Harper","Harrell","Harriet","Harriett","Harrington","Harrods","Harry","Hartline","Hartman","Harvard","Hasbro","Hatsheput","Hattie","Hausdorff","Havoline","Hayden","Haynes","Haywood","Hayworth","Hazel","Heather","Hebert","Heep","Hefner","Heidi","Heimlich","Heineken","Heinlein","Heinrich","Heisman","Helene","Helga","Helvetius","Hench","Henderson","Hendricks","Hennessy","Henri","Henrietta","Hensley","Henson","Heriberto","Herman","Herminia","Hermite","Hermosillo","Hernandez","Heroku","Herrera","Herring","Hersey","Hershel","Hershey","Hertzsprung","Hester","Heston","Hettie","Hewitt","Hewlett","Hezbollah","Hickman","Hicks","Higgins","Hilario","Hilary","Hilda","Hilfiger","Himalaya","Hinton","Hirobumi","Hiss","Hitachi","Hockney","Hodge","Hodges","Hoff","Hoffa","Hoffman","Hofstadter","Hogan","Hogwarts","Hohhot","Holcomb","Holden","Holder","Hollerith","Holley","Hollie","Hollis","Holloway","Holman","Honda","Honecker","Honeywell","Hong","Hooper","Hooters","Hopewell","Horacio","Horatio","Hormel","Hornblower","Horne","Horton","Hotpoint","Hovhaness","Howell","Howells","Hrothgar","Hubble","Huber","Hubert","Huck","Huerta","Huey","Huff","Huffman","Huggins","Hugh","Huitzilopotchli","Humberto","Hummer","Hunspell","Hunter","Huntington","Huntley","Hurd","Hurley","Hurst","Hutton","Hyundai","HÃ©loise","IBM","IKEA","ING","ISO","Iaccoca","Iago","Ian","Iblis","Icahn","Ignacio","Igor","Iguassu","Ijsselmeer","Ike","Ilene","Ilyushin","Imelda","Imhotep","Imodium","Imogene","Imus","Ina","Indira","Indy","Inez","Ingram","Ingrid","Innocent","Inonu","Instagram","Instamatic","Intel","Inuktitut","Iqaluit","Ira","Irma","Irtish","Irvin","Irwin","Isabel","Isabelle","Ishim","Isiah","Isidro","Ismael","Ismail","Ispell","Issac","Isuzu","Itaipu","Itasca","Iva","Ivan","Ivanhoe","Ivory","Izaak","Izod","Izvestia","JFK","Jackie","Jacklyn","Jacky","Jaclyn","Jacobson","Jacqueline","Jacquelyn","Jacques","Jagger","Jagiellon","Jaguar","Jahangir","Jaime","Jake","Jamaal","Jamal","Jamar","Jame","Jamel","James","Jami","Jamie","Jana","Janacek","Janell","Janelle","Janette","Janice","Janie","Janine","Janis","Janjaweed","Janna","Jannie","Japura","Jared","Jarred","Jarrett","Jarrod","Jarvis","Jasmine","Jasper","JavaScript","Javier","Jayapura","Jayawardene","Jayne","Jayson","Jeanette","Jeanie","Jeanine","Jeanne","Jeannette","Jeannie","Jeannine","Jed","Jedi","Jeeves","Jeff","Jefferey","Jeffery","Jeffry","Jekyll","Jenifer","Jenna","Jennie","Jennifer","Jennings","Jenny","Jensen","Jerald","Jeremy","Jeri","Jermaine","Jerold","Jerri","Jerrod","Jerrold","Jess","Jessica","Jessie","Jewel","Jewell","Jillian","Jim","Jimenez","Jimmie","Jimmy","Jinny","Jo","Joann","Joanna","Joanne","Joaquin","Jocelyn","Jodi","Jodie","Jody","Joey","Jogjakarta","Johann","Johanna","Johannes","Johnathan","Johnathon","Johnie","Johnston","Jolene","Jon","Jonas","Jonathon","Joni","Jorge","Jose","Josef","Josefa","Josefina","Josephson","Josie","Josue","Joy","Joyner","Juan","Juana","Juanita","Judaeo","Judd","Judson","Julia","Julianne","Julie","Juliette","Julio","Julius","Julliard","Jurua","Justin","Justine","Justinian","KFC","Kahlua","Kaitlin","Kalb","Kamehameha","Kane","Kaposi","Kara","Karamazov","Kareem","Karenina","Kari","Karin","Karina","Karl","Karla","Karloff","Karo","Karol","Karroo","Karyn","Kasai","Kasey","Kasparov","Kate","Katelyn","Katharine","Katherine","Katheryn","Kathie","Kathleen","Kathrine","Kathryn","Kathy","Katie","Katina","Katrina","Katy","Kaufman","Kaunda","Kawabata","Kaye","Kayla","Keaton","Keck","Keenan","Keillor","Keisha","Keith","Kelley","Kelli","Kellie","Kelsey","Kemp","Kendall","Kendra","Kendrick","Kenmore","Kennan","Kenneth","Kennith","Kenny","Kenton","Kenyon","Keogh","Keokuk","Kerensky","Keri","Kermit","Kerri","Keven","Kevin","Kevorkian","Khalid","Khan","Khayyam","Khazar","Khomeini","Khorana","Khulna","Khwarizmi","Khyber","Kieth","Kilroy","Kim","Kimberly","Kinney","Kirby","Kirchner","Kirghistan","Kirinyaga","Kirkland","Kirkpatrick","Kirsten","Kitty","Klaus","Klein","Klingon","Kmart","Knapp","Kngwarreye","Knievel","Knopf","Knowles","Knudsen","Knuth","Kochab","Kodachrome","Kodaly","Koizumi","Kojak","Kommunizma","Kong","Konrad","Koontz","Koppel","Kornberg","Kory","Kotlin","Koufax","Kraft","Kramer","Kresge","Kringle","Kris","Krishnamurti","Krista","Kristen","Kristi","Kristie","Kristin","Kristina","Kristine","Kristopher","Kristy","Kroc","Kroger","Kronecker","Krystal","Kublai","Kuhn","Kulthumm","Kurt","Kurtis","Kusch","Kuznets","Kuznetsk","Kwan","Kyle","LBJ","Lacey","Lacy","Ladonna","Lafitte","Lajos","Lakeisha","Lakisha","Lamar","Lamborghini","Lamont","Lana","Lance","Landon","Landry","Landsteiner","Lane","Langerhans","Lanka","Lanny","Lara","Laramie","Lardner","Larry","Larsen","Larson","Lascaux","Lassen","Lassie","Latasha","Lateran","Latisha","Latonya","Latoya","Latrobe","Laura","Laurel","Lauren","Laurence","Laurent","Lauri","Laurie","Lavern","Laverne","Lavonne","Lawanda","Layla","Lazaro","Lea","Leach","Lean","Leandro","Leann","Leanna","Leanne","Learjet","Leary","Lebesgue","Leblanc","Lederberg","Leeward","Leger","Lego","Legree","Lehman","Leif","Leila","Lela","Leland","Lelia","Lemaitre","Lemuel","Lemuria","Len","Lenard","Lennon","Lenny","Leno","Lenoir","Lenora","Lenore","Leola","Leona","Leonard","Leonardo","Leonel","Leonor","Leopold","Leopoldo","Lepke","Leroy","Lesa","Lesley","Leslie","Lessie","Lester","Lestrade","Leta","Letha","Leticia","Letitia","Letterman","Levesque","Levine","Levitt","Levy","Lew","Lewinsky","Lexus","Lhotse","Liberace","LibreOffice","Lidia","Lieberman","Liege","Lila","Lilia","Lilian","Liliana","Lillian","Lillie","Lilliput","Lilly","Lily","Limbaugh","Lin","Lina","Linda","Linton","Linus","Linwood","Lionel","Lipscomb","Lipton","Lisa","Lissajous","Listerine","Liston","Little","Litton","Livia","Liz","Liza","Lizzie","Lizzy","Lockheed","Lockwood","Loews","Lois","Lola","Lollobrigida","Lombardi","Lon","Longstreet","Lonnie","Lopez","Lora","Loraine","Lorena","Lorene","Lorenzo","Loretta","Lori","Lorie","Lorna","Lorre","Lorrie","Los","Lott","Lottie","Lou","Louella","Louie","Louisa","Louise","Love","Lovecraft","Lowe","Lowenbrau","Lowery","Loyang","Loyd","Luann","Lucas","Luce","Lucia","Luciano","Lucien","Lucile","Lucille","Lucinda","Lucio","Lucius","Ludwig","Luella","Lufthansa","Lugosi","Luigi","Luis","Luisa","Lula","Lulu","LumiÃ¨re","Lupe","Luria","Luvs","Luz","LyX","Lyle","Lyman","Lyme","Lynda","Lyndon","Lynette","Lynne","Lynnette","Lysistrata","MCI","MGM","MIT","Maalox","Mabel","Mable","MacBride","MacLeish","Maccabeus","Macedon","Macias","Macintosh","Mack","Mackinac","Macumba","Macy","Madden","Maddox","Madeleine","Madeline","Madelyn","Madge","Madurai","Mae","Maeterlinck","Magdalene","Maggie","Maghreb","Maginot","Magoo","Magsaysay","Mahavira","Mahfouz","Maidenform","Maigret","Maiman","Maisie","Maitreya","Majorca","Makarios","Maks","Malabar","Malaprop","Maldive","Maldonado","Malibu","Malinda","Mallomars","Mallory","Malone","Malory","Malplaquet","Mamie","Mamore","Mancini","Mandrell","Mandy","Manfred","Manitoulin","Manley","Mannheim","Manson","Mantle","Manuel","Manuela","Mao","Mapplethorpe","Mara","Marcel","Marcelino","Marcella","Marcelo","Marci","Marcia","Marcie","Marco","Marcos","Marcus","Marcy","Margarito","Marge","Margery","Margie","Margo","Margret","Margrethe","Marguerite","Mari","Maria","MariaDB","Mariana","Marianas","Mariano","Maribel","Maricela","Marie","Marietta","Marilyn","Marina","Mario","Marion","Maris","Marisa","Marisol","Marissa","Maritza","Marjorie","Marjory","Markab","Marla","Marlboro","Marlene","Marley","Marlon","Marple","Marquesas","Marquez","Marquita","Marrakesh","Marriott","Marsha","Marta","Martin","Martina","Martinez","Marty","Marva","Marvell","Maryann","Maryanne","Maryellen","Marylou","Masada","Maserati","MasterCard","Mathew","Mathews","Mathewson","Mathias","Mathis","Matlab","Mattel","Mattie","Maud","Maude","Maura","Maureen","Mauricio","Maurine","Mauro","Mauryan","Mavis","Maxine","Maynard","Mayra","Maytag","Mazama","Mazatlan","Mazola","Mazzini","Mbini","McAdam","McBride","McCain","McCall","McCartney","McCarty","McClain","McClure","McConnell","McCray","McCullough","McDaniel","McDonald","McDonnell","McDowell","McEnroe","McFadden","McFarland","McGee","McGovern","McGowan","McGuffey","McGuire","McIntyre","McKay","McKee","McKenzie","McKinney","McKnight","McLaughlin","McLean","McLeod","McLuhan","McMahon","McMillan","McNamara","McNaughton","McNeil","McPherson","McQueen","McVeigh","Meadows","Meagan","Meany","Meg","Megan","Meghan","Meier","Meighen","Meiji","Mejia","Mel","Melanie","Melendez","Melinda","Melisa","Melisande","Melissa","Melody","Melton","Melva","Melvin","Memcached","Mendeleev","Mendez","Mendocino","Menelaus","Menelik","Menkalinan","Menkar","Menkent","Mennen","Mentholatum","Menuhin","Merak","Mercado","Mercedes","Mercer","Merck","Merle","Merriam","Merrick","Merrill","Merrimack","Merritt","Mervin","Mesabi","Mesmer","Messerschmidt","Metallica","Metamucil","Meyer","Meyers","Mfume","Mia","Miaplacidus","Micheal","Michel","Michele","Michelin","Michelle","Michelob","Mickie","Micky","Microsoft","Miguel","Mike","Mikhail","Mikoyan","Milagros","Mildred","Miles","Milford","Milken","Millard","Millicent","Millie","Milo","Milosevic","Miltown","Mimi","Mimosa","Minamoto","Mindy","Mingus","Minh","Minnelli","Minnie","Minolta","Minot","Minsky","Mintaka","Mir","Mira","Mirach","Mirfak","Miriam","Mirzam","Missy","Misty","Mitch","Mitchel","Mitford","Mithra","Mithridates","Mitsubishi","Mitterrand","Mitty","Mitzi","Mobil","Mobutu","Moe","Moet","Mohacs","Mohamed","Mohammad","Moho","Mohorovicic","Moises","Moiseyev","Moll","Mollie","Molly","Molnar","Mona","Mondale","Monera","MongoDB","Monica","Monique","Monsanto","Monte","Montoya","Monty","Mooney","Morales","Moran","Moreno","Moriarty","Morin","Morison","Morita","Morphy","Morrow","Mort","Morton","Mosley","Motorola","Mouthe","Mouton","Mowgli","Mozilla","Muawiya","Mubarak","Mueller","Mugabe","Mujib","Mulder","Mullen","Muller","Mulligan","Mullikan","Mullins","Mulroney","Mumbai","Munoz","Muppet","Murasaki","Murchison","Muriel","Murine","Murrow","Muscovy","Musharraf","Musial","Mutsuhito","MySQL","MySpace","Myers","Myles","Myra","Myrdal","Myrna","Myrtle","Myst","MÃ¼nchhausen","NASCAR","NORAD","NSA","NVIDIA","Nabisco","Nadia","Nadine","Naipaul","Nair","Naismith","Nam","Namath","Nan","Nanette","Nannie","Nanook","Nantes","Naphtali","Napier","Napster","Narmada","Narnia","Nat","Natalia","Natalie","Natasha","Nate","Nathaniel","Nationwide","Navarro","Navratilova","Ndjamena","Neal","Ned","Negev","Neil","Nelda","Nell","Nellie","Nelly","Nelsen","Nescafe","Nestle","Netflix","Netscape","Nettie","Netzahualcoyotl","Nevsky","Newsweek","Ngaliema","Nguyen","Niccolo","Nichiren","Nichole","Nichols","Nick","Nickelodeon","Nickolas","Nicobar","Nicola","Nicolas","Nicole","Niebuhr","Nieves","Nigel","Nikita","Nikki","Nikolai","Nikon","Nirenberg","Nita","Nivea","NoDoz","Noble","Noe","Noelle","Noemi","Nokia","Nola","Nolan","Nora","Norbert","Norberto","Noreen","Noriega","Normand","Norris","Northrop","Northrup","Norton","Nosferatu","Noumea","Novartis","Noxzema","Noyce","Noyes","Nunavut","Nunez","Nunki","NutraSweet","NyQuil","Nyasa","Nyerere","OHSA","Obama","Obamacare","Oberlin","Ocaml","Ochoa","Octavio","Odell","Odis","Odom","Oersted","Ofelia","OfficeMax","Ogden","Ogilvy","Oise","Ola","Olaf","Olajuwon","Olav","Oldfield","Oldsmobile","Olduvai","Olen","Olenek","Olga","Olin","Olive","Olivetti","Olivia","Ollie","Olmsted","Olsen","Olson","Omar","Oneal","Onegin","Ono","Onsager","Oort","Opel","OpenOffice","Ophelia","Oprah","Ora","Oracle","Oranjestad","Orbison","Orin","Orkney","Orr","Ortega","Ortiz","Orval","Orville","Osbert","Osborn","Osgood","Oshkosh","Osman","Osvaldo","Othello","Oxycontin","Ozark","Ozymandias","Ozzie","PHP","Paar","Pablo","Pabst","Pace","Pacheco","Pacino","Packard","Padilla","Paglia","Paige","Palikir","Palisades","Palmolive","Palmyra","Palomar","Pam","Pamela","Pamirs","Panasonic","Pangaea","Panmunjom","Pansy","Pantaloon","Panza","Paramount","Parkinson","Parsifal","Pasquale","Patel","Patrica","Patrice","Patricia","Patsy","Patterson","Patty","Paula","Paulette","PayPal","Payne","Peabody","Peace","Pearl","Pearlie","Pearson","Peck","Peckinpah","Pedro","Peel","Peg","Peggy","Peiping","Pele","Pelee","Peloponnese","Pena","Penderecki","Penney","Pennington","Penny","Pennzoil","Pensacola","Pentax","Pentium","Pepin","Pepsi","Perelman","Perez","Perl","Perot","Persepolis","Pete","Peter","Petersen","Peterson","Petty","Peugeot","Pfizer","Phaethon","Phekda","Phelps","Philby","Philippe","Phillipa","Philly","Phipps","Phyllis","Piaf","Pickering","Pickford","Pickwick","Pike","Pillsbury","Pinatubo","Pincus","Pinocchio","Pinochet","Pippin","Pissaro","Pitcairn","Pittman","Pius","PlayStation","Playboy","Playtex","Pocono","Poconos","Podhoretz","Pogo","Poiret","Poirot","Poisson","Poitier","PokÃ©mon","Polanski","Pollard","Polly","Poltava","Pooh","Poole","Popeye","Popper","Poppins","Porfirio","Porrima","Porsche","Portia","Post","PostgreSQL","Pottawatomie","Potts","Powell","PowerPC","PowerPoint","Powers","Poznan","Prada","Prado","Prakash","Pramila","Pratchett","Pratt","Pravda","Preminger","Premyslid","Prensa","Prentice","Prescott","Pribilof","Priceline","Prince","Priscilla","Prius","Procter","Proserpine","Prudence","Prudential","Pruitt","Pryor","Puckett","Puerto","Puget","Pugh","Purdue","Purina","Purus","Pushtu","Putin","Puzo","PyTorch","Pygmalion","Pyle","Pynchon","Pyotr","PÃ©tain","PÃ´rto","Qaddafi","Qantas","Qiqihar","Qom","Qualcomm","Quaoar","Quayle","Quentin","Quezon","Quincy","Quintilian","Quinton","Quisling","Quixotism","RCA","RDS","Rabin","Rachael","Rachel","Rachelle","Radcliffe","Rae","Rafael","Raffles","Ralph","Ramada","Ramanujan","Rambo","Ramirez","Ramiro","Ramon","Ramona","Ramos","Ramsey","Randal","Randall","Randell","Randi","Randolph","Randy","Raoul","Rapunzel","Raquel","Rasalgethi","Rasalhague","Rasmussen","Rastaban","Rather","Ratliff","Raul","RayBan","Rayburn","Raymond","Raymundo","Reaganomics","Reasoner","Reba","Redford","Redgrave","Redis","Redshift","Reebok","Reema","Reese","Reeves","Refugio","Reggie","Reginald","Regor","Reilly","Reinaldo","Reinhold","Rena","Renault","Rene","Renee","Reuters","Reuther","Reva","Revlon","Reyes","Reyna","Reynaldo","Rheingau","Rhiannon","Rhoda","Rhode","Rhonda","Richie","Rick","Rickenbacker","Rickey","Rickie","Ricky","Rico","Riddle","Riefenstahl","Riel","Riggs","Rigoberto","Rigoletto","Ringling","Ringo","Rita","Ritesh","Ritz","Rivas","Roach","Robbie","Robbin","Robbins","Robby","Roberson","Robert","Roberta","Roberto","Roberts","Robertson","Robitussin","Robles","Robt","Robyn","Rocco","Rocha","Rochambeau","Roche","Rochelle","Rockne","Rocky","Roddenberry","Roderick","Rodger","Rodolfo","Rodrick","Rodrigo","Rodriguez","Rodriquez","Roeg","Rogelio","Roget","Rojas","Roku","Rolaids","Rolando","Rolex","Rollins","Rolvaag","Romero","Ron","Ronald","Ronda","Ronnie","Ronny","Ronstadt","Rooney","Root","Rory","Rosales","Rosalie","Rosalind","Rosalinda","Rosalyn","Rosanna","Rosanne","Roscoe","Roseann","Rosecrans","Rosella","Rosemarie","Rosemary","Rosenberg","Rosendo","Rosenzweig","Rosie","Roslyn","Rostropovich","Roswell","Roth","Rourke","Rove","Rowena","Rowland","Rowling","Roxanne","Roxie","Roxy","Roy","Rozelle","Rubaiyat","Rubbermaid","Ruben","Rubik","Rubin","Ruchbah","Rudolph","Rudy","Rudyard","Rufus","Ruiz","Rukeyser","Rumpelstiltskin","Rumsfeld","Rushdie","Russel","Russo","Rustbelt","Rusty","Rutan","Rutgers","Ruthie","Rutledge","Ryan","Rydberg","Ryukyu","SAP","SARS","SQLite","SUSE","SVN","Saab","Saatchi","Sabik","Sabina","Sabre","Sabrina","Sacco","Sachs","Saddam","Sadie","Sadr","Safeway","Sagan","Saginaw","Saiph","Sakha","Sakhalin","Saki","Saks","Salas","Salazar","Salesforce","Salisbury","Sallie","Sally","Salome","Salton","Salvatore","Salween","Salyut","Samantha","Samar","Samarkand","Sammie","Sammy","Samoset","Sampson","Samsonite","Samsung","Samuelson","Sana","Sanchez","Sancho","Sanders","Sandoval","Sandra","Sandy","Sanford","Sang","Sanka","Sankara","Santana","Santos","Sara","Saran","Sarasota","Sargasso","Sargon","Sarnoff","Saroyan","Sasha","Saunders","Saundra","Sawyer","Scala","Scheat","Schedar","Scheherazade","Schiaparelli","Schick","Schindler","Schlesinger","Schlitz","Schnauzer","Schneider","Schoenberg","Schrieffer","Schroeder","Schultz","Schulz","Schumpeter","Schuyler","Schuylkill","Schwartz","Schwarzenegger","Schwarzkopf","Schweppes","Schwinger","Schwinn","Scientology","Scopes","Scorsese","Scotia","Scribner","Scruggs","Sculley","Seagram","Sean","Sears","Sebastian","Secretariat","Sedna","Seebeck","Sega","Segovia","Segre","Segundo","Seiko","Seinfeld","Sejong","Selassie","Selectric","Selena","Seleucus","Selim","Selkirk","Sellers","Selma","Selznick","Sennett","Sensurround","Sepoy","Serena","Serengeti","Sergei","Sergio","Serra","Serrano","Sexton","Seymour","Shaffer","Shaka","Shana","Shane","Shankara","Shanna","Shapiro","SharePoint","Sharif","Sharlene","Sharp","Sharpe","Sharron","Shaula","Shaun","Shauna","Shawn","Shawna","Shcharansky","Shea","Shebeli","Sheena","Sheila","Shelby","Sheldon","Shelia","Shell","Shelly","Shelton","Shepherd","Sheppard","Sheratan","Sheree","Sheri","Sherri","Sherrie","Sherry","Sheryl","Shevardnadze","Shields","Shirley","Shockley","Shostakovitch","Shova","Shrek","Shula","Shylockian","Sid","Sierpinski","Sihanouk","Silas","Silva","Silvia","Simenon","Simmons","Simone","Simpson","Simpsons","Sims","Sindbad","Singh","Singleton","Sinkiang","Sjaelland","Skippy","Skype","Slackware","Slashdot","Slater","Slinky","Sloane","Slocum","Slurpee","Small","Smirnoff","Smithsonian","Smokey","Snapple","Snead","Snell","Snickers","Snider","Snoopy","Snyder","Socorro","Solis","Somoza","Sondra","Songhai","Songhua","Sonia","Sonja","Sonny","Sontag","Sony","Sonya","Sophie","Sopwith","Sorbonne","Sosa","Soto","Souphanouvong","Sourceforge","Sova","Soyinka","Spaatz","Spahn","Sparks","Spears","Speer","Spengler","Spenser","Sperry","Spica","Spielberg","Spillane","Spinx","Spiro","Spirograph","Spitz","Springsteen","Sprint","Sprite","Squibb","Srivijaya","Stacey","Staci","Stacie","Stacy","Stael","Stallone","Stan","Stanford","Staples","Starbucks","Starkey","Starr","Staten","Staubach","Stefan","Stefanie","Steinem","Steinmetz","Steinway","Stengel","Stephan","Stephanie","Sterling","Sterne","Steuben","Steve","Steven","Stevie","Stewart","Stieglitz","Stimson","Stine","Stockhausen","Stokes","Stolichnaya","Stolypin","Stoppard","Strabo","Streisand","Strickland","Strong","Stu","Studebaker","Styron","Suarez","Subaru","Sucrets","Sudetenland","Sudoku","Suharto","Sui","Suleiman","Sumeria","Summer","Summers","Sumner","Sunbeam","Sundas","Sunkist","Superbowl","Superfund","Superglue","Superman","Surbhi","Surya","Susan","Susana","Susanne","Susie","Sutherland","Sutton","Suwanee","Suzanne","Suzette","Suzhou","Suzuki","Suzy","Svalbard","Sven","Swammerdam","Swanson","Swedenborg","Sweeney","Swinburne","Swissair","Sybil","Sykes","Sylvester","Sylvia","Sylvie","Szilard","Szymborska","Tang","TWA","Tabatha","Tabitha","Tad","Tagus","Taine","Taklamakan","Taliban","Tallchief","Talley","Talleyrand","Tamara","Tameka","Tamera","Tami","Tamika","Tammi","Tammie","Tammy","Tampax","Tamra","Tania","Tanisha","Tanner","TannhÃ¤user","Tanya","Tarantino","Tarazed","Tarbell","Target","Tarkenton","Tasha","Teasdale","Ted","Teddy","Tenochtitlan","TensorFlow","Teotihuacan","Teresa","Teri","Terkel","Terra","Terran","Terrance","Terrell","Terrence","Terri","Terrie","Tessa","Tessie","Tethys","Texaco","Thad","Thanh","Thar","Tharp","Thea","Theiler","Thelma","Theodore","Theodoric","Theodosius","Therese","Theron","Thespis","ThessalonÃ­ki","Thessaly","Thieu","Thomas","Thornton","Thunderbird","Thurman","Thurmond","Thutmose","Tia","Ticketmaster","Tide","Tienanmen","Tillman","Tim","Timex","Timmy","Timon","Timur","Timurid","Tina","Ting","Tinkerbell","Tinseltown","Tippecanoe","Tisha","Tito","Tlaloc","Tod","Tolyatti","Tomas","Tombaugh","Tomlin","Tommie","Tompkins","Toni","Tonia","Tonto","Tonya","Topsy","Torres","Torvalds","Tosca","Toshiba","Toto","Townes","Townsend","Toynbee","Toyoda","Toyota","Tracey","Traci","Tracie","Tracy","Trailways","Tran","Travis","Travolta","Trekkie","Trent","Trevino","Trevor","Trey","Triangulum","Tricia","Trident","Trina","Trippe","Trisha","Trobriand","Troilus","Tropicana","Truckee","Trudy","Truffaut","Trumbull","Trump","Tsiolkovsky","Tsitsihar","Tsongkhapa","Tuamotu","Tucker","Tucuman","Tulane","Tull","Tulsidas","Tums","Tunguska","Tunney","Turing","Tuscaloosa","Tuscon","Tuskegee","Tussaud","Tut","Tutu","Tweedledee","Tweedledum","Twila","Twitter","Twizzlers","Tyree","Tyson","UBS","UCLA","UPS","Ubuntu","Uccello","Ujungpandang","Umbriel","Underwood","Unicode","Unilever","Uniroyal","Unitas","Unukalhai","Upjohn","Upton","Urban","Uris","Ursa","Usenet","Usman","Vader","Val","Valarie","Valdez","Valenti","Valentin","Valenzuela","Valeria","Valerian","Valerie","Valvoline","Vanessa","Vang","Vanzetti","Vasquez","Vassar","Vaughn","Vazquez","Veblen","Vegemite","Velez","Velma","Velveeta","VelÃ¡squez","Venn","Ventolin","Vera","Verizon","Verlaine","Vern","Verna","Vernon","Vesalius","Viacom","Vicente","Vicki","Vickie","Victor","Vidal","Vijayanagar","Vijayawada","Villarreal","Vilma","Vilyui","Vince","Vincent","Vindemiatrix","Vinson","Viola","Virgie","Visa","Vitim","Vito","Vitus","Vivekananda","Vivienne","Vlad","Vlasic","VoIP","Vogue","Volcker","Voldemort","Volkswagen","Volstead","Volvo","Vonda","Vonnegut","Vorster","Voyager","Vuitton","Waite","Wald","Waldemar","Walden","Waldo","Waldorf","Walgreen","Walgreens","Walker","Walmart","Walpole","Walsh","Walt","Walton","Wanamaker","Wanda","Wang","Wankel","Ware","Waring","Warner","Wasatch","Waters","Watkins","Weaver","Webern","Weddell","Weeks","Wei","Weierstrass","Weill","Weinberg","Weiss","Weissmuller","Weldon","Welland","Weller","Wendell","Wendi","Wendy","Wesak","Wesson","Weston","Weyden","Wezen","Wheaties","Wheatstone","Wheeler","Wheeling","Whipple","Whitefield","Whiteley","Whitfield","Whitley","WiFi","Wiemar","Wiesel","Wiesenthal","Wiggins","Wigner","Wii","Wikileaks","Wikipedia","Wilbert","Wilbur","Wilburn","Wilcox","Wilda","Wiles","Wiley","Wilford","Wilfred","Wilfredo","Wilhelm","Wilhelmina","Wilkerson","Wilkinson","Willa","Willamette","Willie","Willis","Willy","Wilma","Wilmer","Wimbledon","Wimsey","Winchell","Windex","Windward","Winfred","Winfrey","Winifred","Winkle","Winston","Winters","Winthrop","Witt","Wobegon","Wodehouse","Wolfgang","Wollstonecraft","Wonderbra","Wong","Woodard","Woodhull","Woodrow","Woodstock","Woodward","Woolite","Woolongong","Wooster","Wooten","WordPress","Workman","Wovoka","Wozniak","Wozzeck","Wrangell","Wrigley","Wu","Wurlitzer","Wycherley","Wycliffe","Wylie","Wynn","Xamarin","Xian","Xuzhou","Yahtzee","Yamagata","Yamaha","Yaobang","Yataro","Yoko","Yolanda","Yong","Yosemite","Yossarian","YouTube","Yuan","Yunnan","Yuri","Yves","Yvette","Yvonne","Zachariah","Zachary","Zachery","Zane","Zanuck","Zappa","Zara","Zealand","Zedong","Zeke","Zelma","Zenger","Zeno","Zest","Zhivago","Zibo","Ziegler","Ziggy","Zimmerman","Zoe","Zorro","Zosma","eBay","iOS","iPad","iPhone","iPod","iTunes"]),n(755)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,